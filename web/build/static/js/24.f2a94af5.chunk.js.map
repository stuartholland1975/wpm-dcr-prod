{"version":3,"sources":["components/forms/locations/CreateLocationsForm.js","components/forms/locations/DeleteLocationForm.js","components/forms/locations/EditLocationForm.js","components/forms/ImageForm.js","components/order-admin/OrderImageAdmin.js","components/button-bars/OrderLocationButtons.js","components/order-admin/OrderLocations.js","components/ui-components/modals/StyledModal.js","gql/queries/orderheaders.js","components/ui-components/modals/ModalFormButtons.js","components/ui-components/buttons/CreateButton.js","components/ui-components/buttons/CancelButton.js","gql/mutations/locations.js","components/grids/OrderLocationsGrid.js"],"names":["defaultValues","reference","LocationsForm","hideModal","useForm","mode","register","control","handleSubmit","trigger","errors","formState","useFieldArray","name","fields","append","remove","useMutation","CREATE_MANY_LOCATIONS","refetchQueries","query","GET_ORDER_LOCATIONS","variables","id","gridSelectionsVar","selectedOrder","GET_SINGLE_ORDERHEADER","awaitRefetchQueries","onCompleted","createManyLocations","React","useEffect","onSubmit","data","apiObject","sitelocation","map","item","orderheaderId","input","index","Grid","container","spacing","mt","xs","TextField","label","required","autoFocus","variant","fullWidth","render","message","style","color","IconButton","edge","sx","fontSize","background","onClick","a","shouldFocus","then","res","ModalFormButtons","CreateLocationsForm","selectedLocation","useReactiveVar","useModal","StyledModal","showModal","Button","startIcon","disabled","DeleteLocationForm","DELETE_LOCATION","deleteSelectedLocation","Delete","complete","itemCount","confirmAlert","customUI","onClose","className","EDIT_SITE_LOCATION","gql","LocationForm","EditLocation","event","preventDefault","fd","FormData","target","get","defaultValue","EditLocationForm","dt","DateTime","now","toISO","defaultDate","toISODate","UPLOAD_IMAGE","GET_IMAGE_TYPES","GET_SINGLE_LOCATION","ImageForm","Number","fetchPolicy","uploadImage","useState","itemType","setItemType","imageFile","setImageFile","useQuery","dateTakenManual","exifr","parse","exif","gps","image","createdAt","headerImageFile","imageTypeId","sitelocationId","exifGps","type","InputLabelProps","shrink","onChange","files","length","select","value","imageTypes","nodes","MenuItem","longName","CreateButton","CancelButton","OrderImageAdmin","OrderLocationButtons","props","history","useHistory","Box","display","gridTemplateColumns","ml","mr","mb","push","pathname","state","OrderLocations","location","loading","CircularProgress","OrderLocationsGrid","sitelocationWithValues","overlayClassName","isOpen","appElement","document","getElementById","GET_ALL_ORDER_HEADERS","GET_SINGLE_ORDERHEADER_PERIOD_VALUES","Item","other","pt","pb","m","useStyles","makeStyles","root","borderRadius","fontWeight","textTransform","border","borderColor","padding","cursor","classes","CREATE_MANY_ITEMS","rowClassRules","params","defaultColDef","filter","sortable","resizable","flex","columnTypes","dateColumn","setValue","gridApi","setGridApi","gridOptions","columnDefs","useMemo","field","hide","sort","headerName","cellStyle","textAlign","valueGetter","orderValue","valueFormatter","formatNumberGridTwoDecimals","valueComplete","valueApplied","pagination","paginationPageSize","domLayout","rowSelection","onRowSelected","selected","api","getSelectedRows","animateRows","onGridReady","sizeColumnsToFit","onGridSizeChanged","rowData","onFilterChanged","reactUi","isExternalFilterPresent","doesExternalFilterPass","node","position","bottom","left","right","elevation","backgroundColor","borderTopStyle","borderWidth","showLabels","newValue","icon"],"mappings":"gdAiBMA,EAAgB,CAClBC,UAAW,MAGTC,EAAgB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpB,EAMIC,YAAQ,CACRC,KAAM,aANNC,EADJ,EACIA,SACAC,EAFJ,EAEIA,QACAC,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,QACYC,EALhB,EAKIC,UAAYD,OAIhB,EAAiCE,YAAc,CAC3CL,UACAM,KAAM,iBAFHC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,OAKvB,EAA8BC,YAAYC,IAAuB,CAC7DC,eAAgB,CACZ,CACIC,MAAOC,IACPC,UAAW,CACPC,GAAIC,cAAoBC,cAAcF,KAG9C,CACIH,MAAOM,IACPJ,UAAW,CAACC,GAAIC,cAAoBC,cAAcF,MAG1DI,qBAAqB,EACrBC,YAAa,kBAAMzB,OAdhB0B,EAAP,oBA8BA,OAJAC,IAAMC,WAAU,WACZhB,EAAOf,KACR,CAACe,IAGA,uBAAMiB,SAAUxB,GAdH,SAACyB,GACd,IAAMC,EAAYD,EAAKE,aAAaC,KAAI,SAACC,GAAD,mBAAC,eAClCA,GADiC,IAEpCC,cAAed,cAAoBC,cAAcF,QAGrDM,EAAoB,CAACP,UAAW,CAACiB,MAAOL,QAQxC,UACI,kDAICpB,EAAOsB,KAAI,SAACC,EAAMG,GAAP,OACR,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAiBC,GAAI,EAA9C,UACI,eAACH,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,GAAf,UACI,cAACC,EAAA,EAAD,yBACIC,MAAO,sBACHzC,EAAS,gBAAD,OAAiBkC,EAAjB,cAAoC,CAC5CQ,SAAU,gCAHlB,IAKIC,WAAS,EACTC,QAAQ,SACRC,WAAS,KAEb,cAAC,IAAD,CACIzC,OAAQA,EACRG,KAAI,uBAAkB2B,EAAlB,cACJY,OAAQ,gBAAEC,EAAF,EAAEA,QAAF,OACJ,mBAAGC,MAAO,CAACC,MAAO,OAAlB,SAA2BF,UAKvC,cAACZ,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,GAAf,SACI,cAACW,EAAA,EAAD,CACIC,KAAK,MACLC,GAAI,CAACH,MAAO,OAAQI,SAAU,GAAIC,WAAY,aAK9CC,QAAO,sBAAE,sBAAAC,EAAA,sEACCrD,EAAQ,gBAAD,OAAiB+B,EAAjB,cAAoC,CAC7CuB,aAAa,IACdC,MAAK,SAACC,GAAD,OAASA,GAAOlD,EAAOf,MAH1B,2CAPb,SAYI,cAAC,IAAD,QAGR,cAACyC,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,GAAf,SACI,cAACW,EAAA,EAAD,CACIC,KAAK,QACLC,GAAI,CAACH,MAAO,MAAOI,SAAU,GAAIC,WAAY,aAC7CC,QAAS,WACL7C,EAAOwB,IAJf,SAMI,cAAC,IAAD,UA3CqBH,EAAKd,OAgD1C,cAAC2C,EAAA,EAAD,CAAkB/D,UAAWA,QA0B1BgE,EApBa,WACxB,IAAMC,EAAmBC,YAAe7C,KAAmB4C,iBAE3D,EAA+BE,aAAS,kBACpC,cAACC,EAAA,EAAD,UACI,cAAC,EAAD,CAAepE,UAAWA,SAFlC,mBAAOqE,EAAP,KAAkBrE,EAAlB,KAMA,OACI,cAACsE,EAAA,EAAD,CACIlB,MAAM,SACNmB,UAAW,cAAC,IAAD,IACXb,QAASW,EACTG,UAA+B,IAArBP,EAJd,mC,mBC3EOQ,EAnDY,WACvB,IAAMR,EAAmBC,YAAe7C,KAAmB4C,iBAC3D,EAAiCnD,YAAY4D,IAAiB,CAC1D1D,eAAgB,CAAC,CACbC,MAAOC,IACPC,UAAW,CAACC,GAAIC,cAAoBC,cAAcF,KACnD,CACCH,MAAOM,IACPJ,UAAW,CAACC,GAAIC,cAAoBC,cAAcF,MAEtDI,qBAAqB,IARlBmD,EAAP,oBAiCA,OAGI,cAACL,EAAA,EAAD,CACIC,UAAW,cAACK,EAAA,EAAD,IACXxB,MAAM,SACNoB,UACyB,IAArBP,GACCA,GAAoBA,EAAiBY,UAAcZ,GAAoBA,EAAiBa,UAAY,EAEzGpB,QA/BS,kBAAMqB,uBAAa,CAChCC,SAAU,YAAgB,IAAdC,EAAa,EAAbA,QACR,OACI,sBAAKC,UAAU,YAAf,UACI,2DACA,gFAAiDjB,EAAiBnE,aAClE,wBAAQ4D,QAAS,kBAAMiB,EAAuB,CAC1CxD,UAAW,CAACC,GAAI6C,EAAiB7C,MAClCyC,MAAK,kBAAMoB,QAFd,oBAKA,wBAAQvB,QAAS,WACbuB,KADJ,2BAaZ,8B,kBCtCFE,EAAqBC,YAAH,2RAYlBC,EAAe,SAAC,GAAiB,IAAhBrF,EAAe,EAAfA,UACbsB,EAAgB4C,YAAe7C,KAAmBC,cAClD2C,EAAmBC,YAAe7C,KAAmB4C,iBAE3D,EAAuBnD,YAAYqE,EAAoB,CACnDnE,eAAgB,CACZ,CACIC,MAAOC,GACPC,UAAW,CAACC,GAAIE,EAAcF,MAGtCI,qBAAqB,EACrBC,YAAa,kBAAMzB,OARhBsF,EAAP,oBAqBA,OACI,uBAAMzD,SAXW,SAAC0D,GAClBA,EAAMC,iBACN,IAAIC,EAAK,IAAIC,SAASH,EAAMI,QAG5BL,EAAa,CACTnE,UAAW,CAACC,GAAI6C,EAAiB7C,GAAItB,UAAW2F,EAAGG,IAAI,iBAK3D,UACI,cAACtD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,GAAI,EAAhC,SACI,cAACH,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CACIC,MAAM,YACNlC,KAAK,YACLmC,UAAQ,EACRE,QAAQ,SACRC,WAAS,EACT6C,aAAc5B,EAAiBnE,UAC/BgD,WAAS,QAIrB,cAACiB,EAAA,EAAD,CAAkB/D,UAAWA,QA8B1B8F,EA1BU,WAGrB,IAAM7B,EAAmBC,YAAe7C,KAAmB4C,iBAE3D,EAA+BE,aAAS,kBACpC,eAACC,EAAA,EAAD,WACI,oDACA,uBACA,cAAC,EAAD,CAAcpE,UAAWA,UAJjC,mBAAOqE,EAAP,KAAkBrE,EAAlB,KAQA,OACI,cAACsE,EAAA,EAAD,CACIlB,MAAM,SACNmB,UAAW,cAAC,IAAD,IACXb,QAASW,EACTG,UAA+B,IAArBP,EAJd,iC,2DCvEF8B,GAAKC,YAASC,MAAMC,QACpBC,GAAcH,YAASC,MAAMG,YAG7BC,GAAejB,YAAH,8KAUZkB,GAAkBlB,YAAH,4JAYfmB,GAAsBnB,YAAH,uSAkIVoB,GA/GG,SAAC,GAAmB,IAAjBxG,EAAgB,EAAhBA,UAEnB,EAAsBc,YAAYuF,GAAc,CAC9CrF,eAAgB,CACd,CACEC,MAAOsF,GACPpF,UAAW,CAAEC,GAAIqF,OAAOpF,cAAoB4C,iBAAiB7C,KAC7DsF,YAAa,gBAEf,CACEzF,MAAOM,KACPJ,UAAW,CAAEC,GAAIqF,OAAOpF,cAAoBC,cAAcF,OAG9DI,qBAAqB,EACrBC,YAAa,kBAAMzB,OAbd2G,EAAP,oBAeA,EAAgChF,IAAMiF,SAAS,IAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAAkCnF,IAAMiF,WAAxC,mBAAOG,EAAP,KAAkBC,EAAlB,KAMQlF,EAASmF,YAASX,IAAlBxE,KAGFD,EAAQ,uCAAG,WAAO0D,GAAP,qBAAA5B,EAAA,6DACf4B,EAAMC,iBACFC,EAAK,IAAIC,SAASH,EAAMI,QACtBuB,EAAkBzB,EAAGG,IAAI,mBAHhB,SAIIuB,KAAMC,MAAML,GAJhB,cAITM,EAJS,gBAKGF,KAAMG,IAAIP,GALb,cAKTO,EALS,iBAOTX,EAAY,CAChBxF,UAAW,CACTiB,MAAO,CACLmF,MAAO,CACLC,UAAWzB,GACXmB,kBACAO,gBAAiBV,EACjBW,YAAab,EAASzF,GACtBuG,eAAgBtG,cAAoB4C,iBAAiB7C,GACrDiG,KAAMA,EACNO,QAASN,OAjBF,4CAAH,sDAwBd,OACE,sBAAMzF,SAAUA,EAAhB,SACE,eAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,iBACNiF,KAAK,OACLnH,KAAK,kBACLmC,UAAQ,EACRE,QAAQ,SACRC,WAAS,EACT8E,gBAAiB,CAAEC,QAAQ,GAC3BlC,aAAcM,OAGlB,cAAC7D,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,oBACNiF,KAAK,OACL7E,WAAS,EACTD,QAAQ,SACR+E,gBAAiB,CAAEC,QAAQ,GAC3BrH,KAAK,kBACLmC,UAAQ,EACRmF,SAAU,SAACzC,GAAD,OACRA,EAAMI,OAAOsC,MAAMC,OAAS,GAC5BlB,EAAazB,EAAMI,OAAOsC,MAAM,SAItC,cAAC3F,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAO,YACPuF,QAAM,EACNL,gBAAiB,CAAEC,QAAQ,GAC3BhF,QAAS,SACTC,WAAS,EACToF,MAAOvB,EACPmB,SArEW,SAACzC,GACpBuB,EAAYvB,EAAMI,OAAOyC,QA6DnB,SASGtG,GACCA,EAAKuG,WAAWC,MAAMrG,KAAI,SAACC,GAAD,OACxB,cAACqG,GAAA,EAAD,CAAwBH,MAAOlG,EAA/B,SACGA,EAAKsG,UADOtG,EAAKd,WAM5B,cAACkB,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,EAAf,SACE,cAAC+F,EAAA,EAAD,CAAcZ,KAAM,SAAUjF,MAAO,mBAEvC,cAACN,EAAA,EAAD,CAAMJ,MAAI,EAACQ,GAAI,EAAf,SACE,cAACgG,EAAA,EAAD,CAAc9F,MAAO,QAASiF,KAAM,SAAUnE,QAAS1D,EAAWgD,WAAS,Y,qBC7HtE2F,GAvBS,WACpB,IAAM1E,EAAmBC,YAAe7C,KAAmB4C,iBAE3D,EAA+BE,aAAS,kBACpC,eAACC,EAAA,EAAD,WACI,8CACA,uBACA,cAAC,GAAD,CAAWpE,UAAWA,UAJ9B,mBAAOqE,EAAP,KAAkBrE,EAAlB,KAQA,OACI,cAACsE,EAAA,EAAD,CACIlB,MAAM,SACNM,QAASW,EACTG,UAA+B,IAArBP,EACVM,UAAW,cAAC,KAAD,IAJf,2BCmBOqE,GA9Bc,SAACC,GAC1B,IAAM5E,EAAmBC,YAAe7C,KAAmB4C,iBACrD3C,EAAgB4C,YAAe7C,KAAmBC,cAClDwH,EAAUC,cAEhB,OAEI,cADA,CACCC,EAAA,EAAD,CAAKC,QAAS,OAAQC,oBAAoB,2BAA2BC,GAAI,GAAKC,GAAI,GAAKC,GAAI,EAA3F,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC/E,EAAA,EAAD,CACIlB,MAAM,SACNoB,UACyB,IAArBP,GACCA,GAAoBA,EAAiBY,SAE1CnB,QAAS,kBACLoF,EAAQQ,KAAK,CACTC,SAAS,2BACTC,MAAOlI,EAAcF,MATjC,sCCfCF,GAAsBkE,YAAH,8hBAyCjBqE,UApBQ,WACnB,IAAMX,EAAUC,cAEhB,EAAwB9B,YAAS/F,GAAqB,CAClDC,UAAW,CAACC,GAAIqF,OAAOqC,EAAQY,SAASF,QACxC9C,YAAa,sBAFV5E,EAAP,EAAOA,KAKP,OALA,EAAa6H,QAMF,cAACC,EAAA,EAAD,IAIP,qCACI,cAAC,GAAD,IACA,cAACC,EAAA,EAAD,CAAoB/H,KAAMA,GAAQA,EAAKgI,uBAAuBxB,a,6EC5B3DlE,IAZK,SAACyE,GACpB,OACC,cAAC,IAAD,aACC3D,UAAU,QACV6E,iBAAiB,UACjBC,QAAM,EACNC,WAAYC,SAASC,eAAe,SAChCtB,M,mKCRMtH,EAAyB6D,YAAH,ivBAoCtBgF,EAAwBhF,YAAH,upBAkDrBiF,GAjB8BjF,YAAH,gTAiBYA,YAAH,gQ,+FCpFjD,SAASkF,EAAKzB,GACV,IAAOtF,EAAgBsF,EAAhBtF,GAAOgH,EAAd,YAAuB1B,EAAvB,GACA,OACI,cAAC,IAAD,aACItF,GAAE,aACEiH,GAAI,EACJC,GAAI,EACJC,EAAG,GACAnH,IAEHgH,IAwBDxG,IAnBU,SAAC,GAAiB,IAAhB/D,EAAe,EAAfA,UACvB,OACI,eAAC,IAAD,CACIkF,UAAU,gBACV3B,GAAI,CAAC0F,QAAS,OAAQC,oBAAqB,iBAAkBwB,EAAG,GAFpE,UAGI,cAACJ,EAAD,UACI,cAAC,IAAD,CAAQlH,MAAM,SAASJ,WAAS,EAAC6E,KAAK,SAAtC,sBAIJ,cAACyC,EAAD,UACI,cAAC,IAAD,CAAQlH,MAAM,SAASJ,WAAS,EAACU,QAAS1D,EAA1C,0B,gGC3BV2K,EAAYC,YAAW,CAC3BC,KAAM,CACJpH,WAAY,oCACZL,MAAO,QACP0H,aAAc,EAEdC,WAAY,IACZC,cAAe,YACfC,OAAQ,YACRC,YAAa,QACbC,QAAS,EAET,UAAW,CACT1H,WAAY,qCAEd,aAAc,CACZ2H,OAAQ,kBAqBC3C,IAhBM,SAACI,GACpB,IAAMwC,EAAUV,IAEhB,OACE,cAAC,IAAD,yBACE5H,QAAQ,YACRmC,UAAWmG,EAAQR,KACnBtG,UAAW,cAAC,IAAD,IACXvB,WAAS,GACL6F,GALN,aAOGA,EAAMjG,W,8ECjCP+H,EAAYC,YAAW,CAC3BC,KAAM,CACJpH,WAAY,oDACZL,MAAO,QACP0H,aAAc,EAEdC,WAAY,IACZE,OAAQ,YACRC,YAAa,QACbC,QAAS,EAETH,cAAe,YACf,UAAW,CACTvH,WAAY,sDAEd,aAAc,CACZ2H,OAAQ,kBAqBC1C,IAhBM,SAACG,GACpB,IAAMwC,EAAUV,IAEhB,OACE,cAAC,IAAD,yBACE5H,QAAQ,YACRmC,UAAWmG,EAAQR,MAEfhC,GAJN,IAKE7F,WAAS,EALX,SAOG6F,EAAMjG,W,mKClBA7B,GAfkBqE,YAAH,uTAeSA,YAAH,qMAUrBkG,EAAoBlG,YAAH,6LAUjBV,EAAkBU,YAAH,oJ,iMCtBtBmG,EAAgB,CACrB,eAAgB,SAACC,GAAD,OAAYA,EAAO1J,KAAK+C,WAGnC4G,EAAgB,CACrBC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,MAAM,GAIDC,EAAc,CACnBC,WAAY,CACXL,OAAQ,uBAuNK7B,IAnNY,SAAC,GAAc,IAAZ/H,EAAW,EAAXA,KAC7B,EAA0BH,IAAMiF,SAAS,GAAzC,mBAAOwB,EAAP,KAAc4D,EAAd,KACA,EAA8BrK,IAAMiF,SAAS,MAA7C,mBAAOqF,EAAP,KAAgBC,EAAhB,KAmHMC,EAAc,CACnBC,WAlHkBzK,IAAM0K,SACxB,iBAAM,CACL,CAAEC,MAAO,KAAMC,MAAM,EAAMC,KAAM,OACjC,CACCC,WAAY,gBACZH,MAAO,qBACPI,UAAW,CAAEC,UAAW,SAEzB,CACCF,WAAY,WACZH,MAAO,YACPI,UAAW,CAAEC,UAAW,SAEzB,CACCF,WAAY,aACZH,MAAO,YACPzE,KAAM,iBAGP,CACC4E,WAAY,iBACZH,MAAO,gBACPzE,KAAM,iBAGP,CACC4E,WAAY,YACZ5E,KAAM,gBAGN+E,YAAa,SAAUpB,GACtB,OAAOA,EAAO1J,KAAKgD,UAAY0G,EAAO1J,KAAP,gBAGjC,CACC2K,WAAY,cACZH,MAAO,aACPzE,KAAM,iBAIP,CACC4E,WAAY,cACZH,MAAO,aACPzE,KAAM,gBACN+E,YAAa,SAACpB,GAAD,OAAY/E,OAAO+E,EAAO1J,KAAK+K,aAC5CC,eAAgBC,KAEjB,CACCN,WAAY,aACZH,MAAO,gBACPzE,KAAM,gBACN+E,YAAa,SAACpB,GAAD,OAAY/E,OAAO+E,EAAO1J,KAAKkL,gBAC5CF,eAAgBC,KAEjB,CACCN,WAAY,cACZ5E,KAAM,gBACN+E,YAAa,SAAUpB,GACtB,OAAOA,EAAO1J,KAAP,WAA4B0J,EAAO1J,KAAP,eAEpCgL,eAAgBC,KAEjB,CACCN,WAAY,gBACZH,MAAO,eACPzE,KAAM,gBACN+E,YAAa,SAACpB,GAAD,OAAY/E,OAAO+E,EAAO1J,KAAKmL,eAC5CH,eAAgBC,KAEjB,CACCN,WAAY,iBACZ5E,KAAM,gBACN+E,YAAa,SAAUpB,GACtB,OAAOA,EAAO1J,KAAP,cAA+B0J,EAAO1J,KAAP,cAEvCgL,eAAgBC,KAEjB,CACCN,WAAY,iBACZ5E,KAAM,gBACN+E,YAAa,SAAUpB,GACtB,OAAOA,EAAO1J,KAAP,WAA4B0J,EAAO1J,KAAP,WAEpCgL,eAAgBC,KAEjB,CACCN,WAAY,WACZH,MAAO,WACPzE,KAAM,eACNiF,eAAgB,SAAUtB,GACzB,OAAOA,EAAOpD,MAAQ,MAAQ,UAIjC,IAoBAqD,cAAeA,EACfK,YAAaA,EACboB,YAAY,EACZC,mBAAoB,GACpBC,UAAW,aACXC,aAAc,SACdC,cAiBD,SAAqB9B,GACpB,IAAM+B,EAAW/B,EAAOgC,IAAIC,kBACxBF,EAASrF,OAAS,EACrB7G,YAAkB,2BACdA,eADa,IAEhB4C,iBAAkBsJ,EAAS,MAG5BlM,YAAkB,2BAAKA,eAAN,IAA2B4C,kBAAkB,MAxB/DyJ,aAAa,EACbnC,cAAeA,EACfoC,YAAa,SAACnC,GACbA,EAAOgC,IAAII,mBACX1B,EAAWV,EAAOgC,MAEnBK,kBAAmB,SAACrC,GAAD,OAAYA,EAAOgC,IAAII,oBAC1CE,QAAShM,GAwBV,OArBAF,qBAAU,WACLqK,GACHA,EAAQ8B,oBAEP,CAAC9B,EAAS7D,IAcbxG,qBAAU,WACTP,YAAkB,2BAAKA,eAAN,IAA2B4C,kBAAkB,OAC5D,IAEF,eAAC,IAAD,CAAKV,GAAI,CAAE4F,GAAI,EAAGC,GAAI,GAAtB,UACC,cAAC,cAAD,CACC4E,SAAS,EACT7B,YAAaA,EACbjH,UAAU,wBACV+I,wBA7D6B,SAACzC,GAChC,OAAiB,IAAVpD,GA6DL8F,uBA1D4B,SAACC,GAC/B,OAAQ/F,GACP,KAAK,EACJ,OAA8B,IAAvB+F,EAAKrM,KAAK+C,SAClB,KAAK,EACJ,OAA8B,IAAvBsJ,EAAKrM,KAAK+C,SAClB,QACC,OAAO,MAqDR,cAAC,IAAD,CACCtB,GAAI,CAAE6K,SAAU,WAAYC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,GACvDC,UAAW,EAFZ,SAGC,eAAC,IAAD,CACCjL,GAAI,CACH,oCAAqC,CACpCH,MAAO,OACP2H,WAAY,QAEb,mBAAoB,CACnB3H,MAAO,MACP2H,WAAY,SACZ,qCAAsC,CAAEvH,SAAU,IAClD,oCAAqC,CAAEJ,MAAO,UAE/C,qCAAsC,CAAEI,SAAU,IAClDiL,gBAAiB,YACjBC,eAAgB,QAChBC,YAAa,GAEdC,YAAU,EACVxG,MAAOA,EACPJ,SAAU,SAACzC,EAAOsJ,GACjB7C,EAAS6C,IApBX,UAsBC,cAAC,IAAD,CACCjM,MAAM,WACNwF,MAAO,EACP0G,KAAM,cAAC,IAAD,MAEP,cAAC,IAAD,CACClM,MAAM,gBACNwF,OAAO,EACP0G,KAAM,cAAC,IAAD,MAEP,cAAC,IAAD,CACClM,MAAM,mBACNwF,OAAO,EACP0G,KAAM,cAAC,IAAD","file":"static/js/24.f2a94af5.chunk.js","sourcesContent":["/** @format */\n\nimport {useMutation, useReactiveVar} from '@apollo/client';\nimport {ErrorMessage} from '@hookform/error-message';\nimport AddIcon from '@mui/icons-material/Add';\nimport {Button, Grid, IconButton, TextField} from '@mui/material';\nimport React from 'react';\nimport {useFieldArray, useForm} from 'react-hook-form';\nimport {MdOutlineAdd, MdRemove} from 'react-icons/md';\nimport {useModal} from 'react-modal-hook';\nimport {gridSelectionsVar} from '../../../cache';\nimport {CREATE_MANY_LOCATIONS} from '../../../gql/mutations/locations';\nimport {GET_ORDER_LOCATIONS} from '../../../gql/queries/locations';\nimport {GET_SINGLE_ORDERHEADER} from '../../../gql/queries/orderheaders';\nimport ModalFormButtons from \"../../ui-components/modals/ModalFormButtons\";\nimport StyledModal from \"../../ui-components/modals/StyledModal\";\n\nconst defaultValues = {\n    reference: null,\n};\n\nconst LocationsForm = ({hideModal}) => {\n    const {\n        register,\n        control,\n        handleSubmit,\n        trigger,\n        formState: {errors},\n    } = useForm({\n        mode: 'onChange',\n    });\n    const {fields, append, remove} = useFieldArray({\n        control,\n        name: 'sitelocation',\n    });\n\n    const [createManyLocations] = useMutation(CREATE_MANY_LOCATIONS, {\n        refetchQueries: [\n            {\n                query: GET_ORDER_LOCATIONS,\n                variables: {\n                    id: gridSelectionsVar().selectedOrder.id,\n                },\n            },\n            {\n                query: GET_SINGLE_ORDERHEADER,\n                variables: {id: gridSelectionsVar().selectedOrder.id},\n            },\n        ],\n        awaitRefetchQueries: true,\n        onCompleted: () => hideModal(),\n    });\n\n    const onSubmit = (data) => {\n        const apiObject = data.sitelocation.map((item) => ({\n            ...item,\n            orderheaderId: gridSelectionsVar().selectedOrder.id,\n        }));\n\n        createManyLocations({variables: {input: apiObject}});\n    };\n\n    React.useEffect(() => {\n        append(defaultValues);\n    }, [append]);\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <h3>\n                CREATE LOCATIONS\n            </h3>\n\n            {fields.map((item, index) => (\n                <Grid container spacing={2} key={item.id} mt={2}>\n                    <Grid item xs={11}>\n                        <TextField\n                            label={'Location Reference'}\n                            {...register(`sitelocation.${index}.reference`, {\n                                required: 'Please Complete This Field',\n                            })}\n                            autoFocus\n                            variant='filled'\n                            fullWidth\n                        />\n                        <ErrorMessage\n                            errors={errors}\n                            name={`sitelocation.${index}.reference`}\n                            render={({message}) => (\n                                <p style={{color: 'red'}}>{message}</p>\n                            )}\n                        />\n                    </Grid>\n\n                    <Grid item xs={0.5}>\n                        <IconButton\n                            edge='end'\n                            sx={{color: 'blue', fontSize: 40, background: 'lightgrey'}}\n                            /* onClick={() => {\n                                          trigger()\n                                          append(defaultValues);\n                                          }} */\n                            onClick={async () => {\n                                await trigger(`sitelocation.${index}.reference`, {\n                                    shouldFocus: true,\n                                }).then((res) => res && append(defaultValues));\n                            }}>\n                            <MdOutlineAdd/>\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs={0.5}>\n                        <IconButton\n                            edge='start'\n                            sx={{color: 'red', fontSize: 40, background: 'lightgrey'}}\n                            onClick={() => {\n                                remove(index);\n                            }}>\n                            <MdRemove/>\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            ))}\n            <ModalFormButtons hideModal={hideModal}/>\n\n        </form>\n    );\n};\n\nconst CreateLocationsForm = () => {\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation;\n\n    const [showModal, hideModal] = useModal(() => (\n        <StyledModal>\n            <LocationsForm hideModal={hideModal}/>\n        </StyledModal>\n    ));\n\n    return (\n        <Button\n            color='create'\n            startIcon={<AddIcon/>}\n            onClick={showModal}\n            disabled={selectedLocation !== false}>\n            CREATE SITE LOCATION\n        </Button>\n    );\n};\n\nexport default CreateLocationsForm;\n","import React from 'react';\nimport {gridSelectionsVar} from '../../../cache';\nimport {useMutation, useReactiveVar} from '@apollo/client';\nimport {DELETE_LOCATION} from '../../../gql/mutations/locations';\nimport {confirmAlert} from 'react-confirm-alert';\nimport {GET_ORDER_LOCATIONS} from '../../../gql/queries/locations';\nimport {GET_SINGLE_ORDERHEADER} from '../../../gql/queries/orderheaders';\nimport Button from \"@mui/material/Button\";\nimport {Delete} from \"@mui/icons-material\";\n\n\nconst DeleteLocationForm = () => {\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation\n    const [deleteSelectedLocation] = useMutation(DELETE_LOCATION, {\n        refetchQueries: [{\n            query: GET_ORDER_LOCATIONS,\n            variables: {id: gridSelectionsVar().selectedOrder.id}\n        }, {\n            query: GET_SINGLE_ORDERHEADER,\n            variables: {id: gridSelectionsVar().selectedOrder.id}\n        }],\n        awaitRefetchQueries: true,\n    })\n\n\n    const onSubmit = () => confirmAlert({\n        customUI: ({onClose}) => {\n            return (\n                <div className=\"custom-ui\">\n                    <h1>Confirm Location Deletion</h1>\n                    <p>{`Are You Sure You Want To Delete Location: ${selectedLocation.reference}`}</p>\n                    <button onClick={() => deleteSelectedLocation({\n                        variables: {id: selectedLocation.id},\n                    }).then(() => onClose())}\n                    >SUBMIT\n                    </button>\n                    <button onClick={() => {\n                        onClose()\n                    }}\n                    >CANCEL\n                    </button>\n                </div>\n            );\n        }\n    })\n\n    return (\n\n\n        <Button\n            startIcon={<Delete/>}\n            color='delete'\n            disabled={\n                selectedLocation === false ||\n                (selectedLocation && selectedLocation.complete) || (selectedLocation && selectedLocation.itemCount > 0)\n            }\n            onClick={onSubmit}\n        >delete location\n        </Button>\n    );\n};\n\nexport default DeleteLocationForm;","import {gql, useMutation, useReactiveVar} from '@apollo/client';\nimport {gridSelectionsVar} from '../../../cache';\nimport {Grid, TextField} from '@mui/material';\nimport {useModal} from 'react-modal-hook';\nimport {GET_ORDER_LOCATIONS} from '../../order-admin/OrderLocations';\nimport Button from \"@mui/material/Button\";\nimport React from \"react\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ModalFormButtons from \"../../ui-components/modals/ModalFormButtons\";\nimport StyledModal from \"../../ui-components/modals/StyledModal\";\n\nconst EDIT_SITE_LOCATION = gql`\n    mutation CreateSiteLocation($id: Int!, $reference: String!) {\n        updateSitelocation(input: {patch: {reference: $reference}, id: $id}) {\n            sitelocation {\n                id\n                reference\n            }\n        }\n    }\n`\n\n\nconst LocationForm = ({hideModal}) => {\n    const selectedOrder = useReactiveVar(gridSelectionsVar).selectedOrder;\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation\n\n    const [EditLocation] = useMutation(EDIT_SITE_LOCATION, {\n        refetchQueries: [\n            {\n                query: GET_ORDER_LOCATIONS,\n                variables: {id: selectedOrder.id}\n            }\n        ],\n        awaitRefetchQueries: true,\n        onCompleted: () => hideModal()\n    })\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        let fd = new FormData(event.target);\n\n\n        EditLocation({\n            variables: {id: selectedLocation.id, reference: fd.get('reference')}\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Grid container spacing={5} mt={2}>\n                <Grid item xs={12}>\n                    <TextField\n                        label='Reference'\n                        name='reference'\n                        required\n                        variant='filled'\n                        fullWidth\n                        defaultValue={selectedLocation.reference}\n                        autoFocus\n                    />\n                </Grid>\n            </Grid>\n            <ModalFormButtons hideModal={hideModal}/>\n        </form>\n    );\n};\nconst EditLocationForm = () => {\n\n\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation\n\n    const [showModal, hideModal] = useModal(() => (\n        <StyledModal>\n            <h3>EDIT SITE LOCATION</h3>\n            <hr/>\n            <LocationForm hideModal={hideModal}/>\n        </StyledModal>\n    ));\n\n    return (\n        <Button\n            color='update'\n            startIcon={<EditIcon/>}\n            onClick={showModal}\n            disabled={selectedLocation === false}\n        >\n            EDIT SITE LOCATION\n        </Button>\n\n    );\n};\n\nexport default EditLocationForm;","import {gql, useMutation, useQuery} from \"@apollo/client\";\nimport CreateButton from \"../ui-components/buttons/CreateButton\";\nimport CancelButton from \"../ui-components/buttons/CancelButton\";\nimport {Grid, MenuItem, TextField} from \"@mui/material\";\nimport React from \"react\";\nimport {DateTime} from \"luxon\";\nimport exifr from 'exifr'\nimport {gridSelectionsVar} from \"../../cache\";\nimport {GET_SINGLE_ORDERHEADER} from '../order-admin/OrderStats';\n\nconst dt = DateTime.now().toISO();\nconst defaultDate = DateTime.now().toISODate();\n\n\nconst UPLOAD_IMAGE = gql`\n  mutation CreateImage($input: CreateImageInput!) {\n    createImage(input: $input) {\n      image {\n        orderheaderId\n      }\n    }\n  }\n`;\n\nconst GET_IMAGE_TYPES = gql`\n  query GetImageTypes {\n    imageTypes {\n      nodes {\n        id\n        longName\n        shortName\n      }\n    }\n  }\n`;\n\nconst GET_SINGLE_LOCATION = gql`\nquery GetSingleLocation($id: Int!) {\n  sitelocationWithValue(id: $id) {\n    complete\n    id\n    itemCount\n    itemsComplete\n    orderValue\n    orderheaderId\n    reference\n    valueApplied\n    valueComplete\n    worksheetReference\n    imageCount\n  }\n}\n\n`\n\nconst ImageForm = ({ hideModal }) => {\n\n  const [uploadImage] = useMutation(UPLOAD_IMAGE, {\n    refetchQueries: [\n      {\n        query: GET_SINGLE_LOCATION,\n        variables: { id: Number(gridSelectionsVar().selectedLocation.id) },\n        fetchPolicy: 'network-only'\n      },\n      {\n        query: GET_SINGLE_ORDERHEADER,\n        variables: { id: Number(gridSelectionsVar().selectedOrder.id) },\n      },\n    ],\n    awaitRefetchQueries: true,\n    onCompleted: () => hideModal()\n  });\n  const [itemType, setItemType] = React.useState({});\n\n  const [imageFile, setImageFile] = React.useState()\n\n  const handleChange = (event) => {\n    setItemType(event.target.value);\n  };\n\n  const { data } = useQuery(GET_IMAGE_TYPES);\n\n\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    let fd = new FormData(event.target)\n    const dateTakenManual = fd.get(\"dateTakenManual\")\n    const exif = await exifr.parse(imageFile)\n    const gps = await exifr.gps(imageFile)\n\n    await uploadImage({\n      variables: {\n        input: {\n          image: {\n            createdAt: dt,\n            dateTakenManual,\n            headerImageFile: imageFile,\n            imageTypeId: itemType.id,\n            sitelocationId: gridSelectionsVar().selectedLocation.id,\n            exif: exif,\n            exifGps: gps\n          },\n        },\n      },\n    })\n\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <TextField\n            label=\"Work Done Date\"\n            type=\"date\"\n            name=\"dateTakenManual\"\n            required\n            variant=\"filled\"\n            fullWidth\n            InputLabelProps={{ shrink: true }}\n            defaultValue={defaultDate}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            label=\"Select Image File\"\n            type=\"file\"\n            fullWidth\n            variant=\"filled\"\n            InputLabelProps={{ shrink: true }}\n            name=\"headerImageFile\"\n            required\n            onChange={(event) => (\n              event.target.files.length > 0 &&\n              setImageFile(event.target.files[0])\n            )}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Item Type\"}\n            select\n            InputLabelProps={{ shrink: true }}\n            variant={\"filled\"}\n            fullWidth\n            value={itemType}\n            onChange={handleChange}\n          >\n            {data &&\n              data.imageTypes.nodes.map((item) => (\n                <MenuItem key={item.id} value={item}>\n                  {item.longName}\n                </MenuItem>\n              ))}\n          </TextField>\n        </Grid>\n        <Grid item xs={6}>\n          <CreateButton type={\"submit\"} label={\"upload image\"} />\n        </Grid>\n        <Grid item xs={6}>\n          <CancelButton label={\"CLOSE\"} type={\"button\"} onClick={hideModal} fullWidth />\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nexport default ImageForm;\n","/** @format */\n\nimport React from 'react';\nimport {useModal} from 'react-modal-hook';\nimport ImageForm from '../forms/ImageForm';\nimport {useReactiveVar} from '@apollo/client';\nimport {gridSelectionsVar} from '../../cache';\nimport Button from '@mui/material/Button';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport StyledModal from \"../ui-components/modals/StyledModal\";\n\nconst OrderImageAdmin = () => {\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation;\n\n    const [showModal, hideModal] = useModal(() => (\n        <StyledModal>\n            <h3>UPLOAD IMAGE</h3>\n            <hr/>\n            <ImageForm hideModal={hideModal}/>\n        </StyledModal>\n    ));\n\n    return (\n        <Button\n            color='create'\n            onClick={showModal}\n            disabled={selectedLocation === false}\n            startIcon={<FileUploadIcon/>}\n        >\n            UPLOAD IMAGE\n        </Button>\n    );\n};\n\nexport default OrderImageAdmin;\n","/** @format */\n\nimport {useReactiveVar} from '@apollo/client';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport {useHistory} from 'react-router-dom';\nimport {gridSelectionsVar} from '../../cache';\nimport CreateLocationsForm from '../forms/locations/CreateLocationsForm';\nimport DeleteLocationForm from '../forms/locations/DeleteLocationForm';\nimport EditLocationForm from '../forms/locations/EditLocationForm';\nimport OrderImageAdmin from '../order-admin/OrderImageAdmin';\n\nconst OrderLocationButtons = (props) => {\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation;\n    const selectedOrder = useReactiveVar(gridSelectionsVar).selectedOrder;\n    const history = useHistory();\n\n    return (\n        // <Box sx={{display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', mb: 2}}>\n        <Box display={\"grid\"} gridTemplateColumns=\"auto auto auto auto auto\" ml={0.5} mr={0.5} mb={2}>\n            <CreateLocationsForm/>\n            <EditLocationForm/>\n            <DeleteLocationForm/>\n            <OrderImageAdmin/>\n            <Button\n                color='action'\n                disabled={\n                    selectedLocation === false ||\n                    (selectedLocation && selectedLocation.complete)\n                }\n                onClick={() =>\n                    history.push({\n                        pathname: `/projects/admin/progress`,\n                        state: selectedOrder.id,\n                    })\n                }>\n                UPDATE WORK PROGRESS\n            </Button>\n        </Box>\n    );\n};\n\nexport default OrderLocationButtons;\n","/** @format */\n\nimport React from 'react';\nimport {gql, useQuery} from '@apollo/client';\nimport {useHistory} from 'react-router-dom';\nimport {CircularProgress} from '@mui/material';\nimport OrderLocationsGrid from '../grids/OrderLocationsGrid';\nimport OrderLocationButtons from '../button-bars/OrderLocationButtons';\n\nexport const GET_ORDER_LOCATIONS = gql`\n    query GetOrderLocations($id: Int!) {\n        sitelocationWithValues(filter: { orderheaderId: { equalTo: $id } }) {\n            nodes {\n                complete\n                id\n                itemCount\n                itemsComplete\n                orderValue\n                orderheaderId\n                reference\n                valueApplied\n                valueComplete\n                worksheetReference\n                imageCount\n            }\n            totalCount\n        }\n    }\n`;\n\nconst OrderLocations = () => {\n    const history = useHistory();\n\n    const {data, loading} = useQuery(GET_ORDER_LOCATIONS, {\n        variables: {id: Number(history.location.state)},\n        fetchPolicy: 'cache-and-network',\n    });\n\n    if (loading) {\n        return <CircularProgress/>;\n    }\n\n    return (\n        <>\n            <OrderLocationButtons/>\n            <OrderLocationsGrid data={data && data.sitelocationWithValues.nodes}/>\n        </>\n    );\n};\n\nexport default OrderLocations;\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport ReactModal from 'react-modal';\r\n\r\nconst StyledModal = (props) => {\r\n\treturn (\r\n\t\t<ReactModal\r\n\t\t\tclassName='Modal'\r\n\t\t\toverlayClassName='Overlay'\r\n\t\t\tisOpen\r\n\t\t\tappElement={document.getElementById('root')}\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default StyledModal;\r\n","/** @format */\n\nimport { gql } from '@apollo/client';\n\nexport const GET_SINGLE_ORDERHEADER = gql`\n\tquery GetSingleOrderheader($id: Int!) {\n\t\torderheaderWithValue(id: $id) {\n\t\t\tid\n\t\t\tarea\n\t\t\taverageItemValue\n\t\t\taverageLocationValue\n\t\t\tendDate\n\t\t\tissuedDate\n\t\t\titemCount\n\t\t\titemCountBoq\n\t\t\titemCountVarn\n\t\t\titemsComplete\n\t\t\titemsCompleteBoq\n\t\t\titemsCompleteVarn\n\t\t\tlocationCount\n\t\t\tlocationsComplete\n\t\t\timageCount\n\t\t\torderNumber\n\t\t\torderValueLabour\n\t\t\torderValueMaterials\n\t\t\torderValueOther\n\t\t\torderValueTotal\n\t\t\torderValueTotalVarn\n\t\t\torderValueTotalBoq\n\t\t\torderValueLabour\n\t\t\torderValueMaterials\n\t\t\torderValueTotalComplete\n\t\t\torderValueTotalApplied\n\t\t\tprojectTitle\n\t\t\tstartDate\n\t\t\tworkType\n\t\t}\n\t}\n`;\n\nexport const GET_ALL_ORDER_HEADERS = gql`\n\tquery GetOrderheadersWithValues {\n\t\torderheaderWithValues {\n\t\t\tnodes {\n\t\t\t\tarea\n\t\t\t\taverageItemValue\n\t\t\t\taverageLocationValue\n\t\t\t\tid\n\t\t\t\titemCount\n\t\t\t\titemsComplete\n\t\t\t\tlocationsComplete\n\t\t\t\titemCountVarn\n\t\t\t\tlocationCount\n\t\t\t\torderNumber\n\t\t\t\tprojectTitle\n\t\t\t\tworkType\n\t\t\t\tissuedDate\n\t\t\t\tdocumentCount\n\t\t\t\torderValueTotal\n\t\t\t\torderValueTotalComplete\n\t\t\t\torderValueTotalApplied\n\t\t\t\timageCount\n\t\t\t\tstatusDescription\n\t\t\t\tstartDate\n\t\t\t\tendDate\n\t\t\t\tareaId\n\t\t\t\tworktypeId\n\t\t\t\torderStatusId\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const GET_ALL_ORDER_HEADERS_BASIC = gql`\n\tquery GetOrderheadersWithValuesBasic {\n\t\torderheaderWithValues {\n\t\t\tnodes {\n\t\t\t\torderNumber\n\t\t\t\tprojectTitle\n\t\t\t\torderValueTotal\n\t\t\t\torderValueTotalComplete\n\t\t\t\tarea\n\t\t\t\titemCount\n\t\t\t\tlocationCount\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const GET_SINGLE_ORDERHEADER_PERIOD_VALUES = gql`\n\tquery GetSingleOrderheaderPeriodValues($id: Int!) {\n\t\tperiodAnalysisOrderValues(condition: { orderheaderId: $id }) {\n\t\t\tnodes {\n\t\t\t\tperiodNumber\n\t\t\t\tvalueComplete\n\t\t\t\tprojectTitle\n\t\t\t}\n\t\t}\n\t}\n`;\n","/** @format */\n\nimport {Button} from '@mui/material';\nimport Box from '@mui/material/Box';\nimport React from 'react';\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                pt: 1,\n                pb: 1,\n                m: 1,\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\nconst ModalFormButtons = ({hideModal}) => {\n    return (\n        <Box\n            className='button-footer'\n            sx={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', m: 2}}>\n            <Item>\n                <Button color='submit' fullWidth type='submit'>\n                    submit\n                </Button>\n            </Item>\n            <Item>\n                <Button color='cancel' fullWidth onClick={hideModal}>\n                    close\n                </Button>\n            </Item>\n        </Box>\n    );\n};\n\nexport default ModalFormButtons;\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport {makeStyles} from '@mui/styles';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(#015b5b, #052e2e)',\n    color: 'white',\n    borderRadius: 0,\n\n    fontWeight: 600,\n    textTransform: 'uppercase',\n    border: '5px solid',\n    borderColor: 'white',\n    padding: 2,\n\n    '&:hover': {\n      background: 'linear-gradient(#052e2e, #015b5b)',\n    },\n    '&:disabled': {\n      cursor: 'not-allowed',\n    },\n  },\n});\n\nconst CreateButton = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant='contained'\n      className={classes.root}\n      startIcon={<AddIcon />}\n      fullWidth\n      {...props}\n    >\n      {props.label}\n    </Button>\n  );\n};\n\nexport default CreateButton;\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport {makeStyles} from '@mui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(hsl(0, 0%, 80%), hsl(0, 0%, 25%))',\n    color: 'white',\n    borderRadius: 0,\n\n    fontWeight: 600,\n    border: '5px solid',\n    borderColor: 'white',\n    padding: 2,\n\n    textTransform: 'uppercase',\n    '&:hover': {\n      background: 'linear-gradient(hsl(0, 0%, 25%), hsl(10, 0%, 80%))',\n    },\n    '&:disabled': {\n      cursor: 'not-allowed',\n    },\n  },\n});\n\nconst CancelButton = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant='contained'\n      className={classes.root}\n     // startIcon={<ToggleOffIcon />}\n      {...props}\n      fullWidth\n    >\n      {props.label}\n    </Button>\n  );\n};\n\nexport default CancelButton;\n","import { gql } from \"@apollo/client\";\n\n\nexport const CREATE_LOCATION = gql`\nmutation CreateLocation($reference: String!, $orderId: Int!) {\n  createSitelocation(\n    input: { sitelocation: { reference: $reference, orderheaderId: $orderId} }\n  ) {\n    sitelocation {\n      id\n      orderheaderId\n      reference\n      worksheetReference\n    }\n  }\n}\n`\n\nexport const CREATE_MANY_LOCATIONS = gql`\nmutation CreateManyLocations($input: [SitelocationInput]!) {\n   sitelocationCreateBulkLocations(\n    input: {locations: $input}\n  ) {\n    clientMutationId\n  }\n}\n`\n\nexport const CREATE_MANY_ITEMS = gql`\nmutation CreateManyItems($input: [OrderdetailInput]!) {\n   orderdetailCreateBulkItems(\n    input: {orderdetails: $input}\n  ) {\n    clientMutationId\n  }\n}\n`\n\nexport const DELETE_LOCATION = gql`\nmutation DeleteLocation($id: Int!) {\n  deleteSitelocation(input: {id: $id}) {\n    deletedSitelocationNodeId\n  }\n}\n`","/** @format */\r\n\r\nimport AllInclusiveIcon from '@mui/icons-material/AllInclusive';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport {\r\n\tBottomNavigation,\r\n\tBottomNavigationAction,\r\n\tBox,\r\n\tPaper,\r\n} from '@mui/material';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport React, { useEffect } from 'react';\r\nimport { gridSelectionsVar } from '../../cache';\r\nimport { formatNumberGridTwoDecimals } from '../../functions/commonFunctions';\r\n\r\nconst rowClassRules = {\r\n\t'complete-row': (params) => params.data.complete,\r\n};\r\n\r\nconst defaultColDef = {\r\n\tfilter: true,\r\n\tsortable: true,\r\n\tresizable: true,\r\n\tflex: true,\r\n\t// floatingFilter: true,\r\n};\r\n\r\nconst columnTypes = {\r\n\tdateColumn: {\r\n\t\tfilter: 'agDateColumnFilter',\r\n\t},\r\n};\r\n\r\nconst OrderLocationsGrid = ({ data }) => {\r\n\tconst [value, setValue] = React.useState(0);\r\n\tconst [gridApi, setGridApi] = React.useState(null);\r\n\r\n\tconst columnDefs = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{ field: 'id', hide: true, sort: 'asc' },\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Worksheet Ref',\r\n\t\t\t\tfield: 'worksheetReference',\r\n\t\t\t\tcellStyle: { textAlign: 'left' },\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Location',\r\n\t\t\t\tfield: 'reference',\r\n\t\t\t\tcellStyle: { textAlign: 'left' },\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Item Count',\r\n\t\t\t\tfield: 'itemCount',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\t//maxWidth: 120,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Items Complete',\r\n\t\t\t\tfield: 'itemsComplete',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\t//\tmaxWidth: 150,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Items O/S',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\t//\tmaxWidth: 150,\r\n\r\n\t\t\t\tvalueGetter: function (params) {\r\n\t\t\t\t\treturn params.data.itemCount - params.data['itemsComplete'];\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Image Count',\r\n\t\t\t\tfield: 'imageCount',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\t//\tmaxWidth: 150,\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Order Value',\r\n\t\t\t\tfield: 'orderValue',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: (params) => Number(params.data.orderValue),\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Done Value',\r\n\t\t\t\tfield: 'valueComplete',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: (params) => Number(params.data.valueComplete),\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'To Do Value',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: function (params) {\r\n\t\t\t\t\treturn params.data['orderValue'] - params.data['valueComplete'];\r\n\t\t\t\t},\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Applied Value',\r\n\t\t\t\tfield: 'valueApplied',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: (params) => Number(params.data.valueApplied),\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'To Apply Value',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: function (params) {\r\n\t\t\t\t\treturn params.data['valueComplete'] - params.data['valueApplied'];\r\n\t\t\t\t},\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Ave Item Value',\r\n\t\t\t\ttype: 'numericColumn',\r\n\t\t\t\tvalueGetter: function (params) {\r\n\t\t\t\t\treturn params.data['orderValue'] / params.data['itemCount'];\r\n\t\t\t\t},\r\n\t\t\t\tvalueFormatter: formatNumberGridTwoDecimals,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaderName: 'Complete',\r\n\t\t\t\tfield: 'complete',\r\n\t\t\t\ttype: 'rightAligned',\r\n\t\t\t\tvalueFormatter: function (params) {\r\n\t\t\t\t\treturn params.value ? 'Yes' : 'No';\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\t[],\r\n\t);\r\n\r\n\tconst isExternalFilterPresent = (params) => {\r\n\t\treturn value !== 0;\r\n\t};\r\n\r\n\tconst doesExternalFilterPass = (node) => {\r\n\t\tswitch (value) {\r\n\t\t\tcase true:\r\n\t\t\t\treturn node.data.complete === true;\r\n\t\t\tcase false:\r\n\t\t\t\treturn node.data.complete === false;\r\n\t\t\tdefault:\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t};\r\n\r\n\tconst gridOptions = {\r\n\t\tcolumnDefs: columnDefs,\r\n\t\tdefaultColDef: defaultColDef,\r\n\t\tcolumnTypes: columnTypes,\r\n\t\tpagination: true,\r\n\t\tpaginationPageSize: 25,\r\n\t\tdomLayout: 'autoHeight',\r\n\t\trowSelection: 'single',\r\n\t\tonRowSelected: selectedRow,\r\n\t\tanimateRows: true,\r\n\t\trowClassRules: rowClassRules,\r\n\t\tonGridReady: (params) => {\r\n\t\t\tparams.api.sizeColumnsToFit();\r\n\t\t\tsetGridApi(params.api);\r\n\t\t},\r\n\t\tonGridSizeChanged: (params) => params.api.sizeColumnsToFit(),\r\n\t\trowData: data,\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (gridApi) {\r\n\t\t\tgridApi.onFilterChanged();\r\n\t\t}\r\n\t}, [gridApi, value]);\r\n\r\n\tfunction selectedRow(params) {\r\n\t\tconst selected = params.api.getSelectedRows();\r\n\t\tif (selected.length > 0) {\r\n\t\t\tgridSelectionsVar({\r\n\t\t\t\t...gridSelectionsVar(),\r\n\t\t\t\tselectedLocation: selected[0],\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tgridSelectionsVar({ ...gridSelectionsVar(), selectedLocation: false });\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgridSelectionsVar({ ...gridSelectionsVar(), selectedLocation: false });\r\n\t}, []);\r\n\treturn (\r\n\t\t<Box sx={{ ml: 1, mr: 1 }}>\r\n\t\t\t<AgGridReact\r\n\t\t\t\treactUi={true}\r\n\t\t\t\tgridOptions={gridOptions}\r\n\t\t\t\tclassName='ag-theme-custom-react'\r\n\t\t\t\tisExternalFilterPresent={isExternalFilterPresent}\r\n\t\t\t\tdoesExternalFilterPass={doesExternalFilterPass}\r\n\t\t\t/>\r\n\t\t\t<Paper\r\n\t\t\t\tsx={{ position: 'absolute', bottom: 0, left: 0, right: 0 }}\r\n\t\t\t\televation={3}>\r\n\t\t\t\t<BottomNavigation\r\n\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t'& .MuiBottomNavigationAction-root': {\r\n\t\t\t\t\t\t\tcolor: 'navy',\r\n\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'& .Mui-selected ': {\r\n\t\t\t\t\t\t\tcolor: 'red',\r\n\t\t\t\t\t\t\tfontWeight: 'bolder',\r\n\t\t\t\t\t\t\t'& .MuiBottomNavigationAction-label': { fontSize: 14 },\r\n\t\t\t\t\t\t\t'& .MuiBottomNavigationAction-icon': { color: 'black' },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'& .MuiBottomNavigationAction-label': { fontSize: 14 },\r\n\t\t\t\t\t\tbackgroundColor: 'lightgray',\r\n\t\t\t\t\t\tborderTopStyle: 'solid',\r\n\t\t\t\t\t\tborderWidth: 2,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tshowLabels\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={(event, newValue) => {\r\n\t\t\t\t\t\tsetValue(newValue);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<BottomNavigationAction\r\n\t\t\t\t\t\tlabel='Show All'\r\n\t\t\t\t\t\tvalue={0}\r\n\t\t\t\t\t\ticon={<AllInclusiveIcon />}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<BottomNavigationAction\r\n\t\t\t\t\t\tlabel='Complete Only'\r\n\t\t\t\t\t\tvalue={true}\r\n\t\t\t\t\t\ticon={<CheckIcon />}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<BottomNavigationAction\r\n\t\t\t\t\t\tlabel='Outstanding Only'\r\n\t\t\t\t\t\tvalue={false}\r\n\t\t\t\t\t\ticon={<ClearIcon />}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</BottomNavigation>\r\n\t\t\t</Paper>\r\n\t\t</Box>\r\n\t);\r\n};\r\nexport default OrderLocationsGrid;\r\n"],"sourceRoot":""}