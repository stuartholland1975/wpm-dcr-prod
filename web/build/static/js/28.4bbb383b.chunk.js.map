{"version":3,"sources":["components/dashboard/ApplicationValueChart.js","components/dashboard/AreaValueChart.js","components/dashboard/DashboardStats.js","components/dashboard/OrderValueChart.js","components/dashboard/SupervisorValueChart.js","components/dashboard/WeeklyValueChart.js","components/dashboard/ContractDashboard.js","functions/commonFunctions.js"],"names":["GET_APPLICATION_DATA","gql","ApplicationValueChart","React","useState","chartData","setChartData","useQuery","onCompleted","data","applicationWithValues","nodes","map","item","applicationValue","Number","loading","CircularProgress","style","borderStyle","borderWidth","background","textDecoration","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","Label","value","offset","position","YAxis","tickFormatter","formatNumberNoDecimals","allowDataOverflow","Tooltip","formatter","name","Bar","fill","GET_AREA_DATA","AreaValueChart","fetchPolicy","areaWithValues","valueComplete","GET_DASHBOARD_STATS","Item","props","sx","other","Box","bgcolor","p","ml","mr","flexGrow","DashboardStats","display","mb","mt","Typography","contractDashboards","currentYear","currentWeek","totalOrdersReceived","totalContractOrderValue","totalContractValueComplete","contractTotalValueTodo","contractTotalValueApplied","contractTotalValueToApply","averagePeriodValue","GET_ORDER_VALUES","OrderValueChart","orderheaderWithValues","orderValueTotal","orderValueTotalComplete","stackId","LabelList","GET_SUPERVISOR_DATA","SupervisorValueChart","supervisorsWithValues","GET_PERIOD_VALUES","ValueChartTest","WeeklyValueChart","periodWithValues","worksValueCurrent","ContractDashboard","Grid","container","spacing","xs","formatNumberGridNoDecimals","number","numeral","format","formatNumberGridTwoDecimals","formatNumberTwoDecimals","formatDateGrid","date","DateTime","fromISO","toFormat","formatDate","removeCommon","first","second","filter","el","includes","removedFromInitial","numberOnly","event","key","getFirstLetters","str","split","word","join","fixKeys","fn","obj","Object","fromEntries","entries","k","v","Array","isArray","s","replace","c","toUpperCase","toLowerCase","divideIfNotZero","numerator","denominator","isNaN","renameKeys","newKeys","keyValues","keys","newKey","assign"],"mappings":"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","file":"static/js/28.4bbb383b.chunk.js","sourcesContent":["import React from 'react';\nimport {gql, useQuery} from '@apollo/client'\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\nimport {CircularProgress} from '@mui/material';\nimport {Bar, BarChart, CartesianGrid, Label, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\n\nconst GET_APPLICATION_DATA = gql`\nquery GetApplicationData {\n  applicationWithValues(orderBy: APPLICATION_NUMBER_ASC, last: 10) {\n    nodes {\n      applicationValue\n      applicationNumber\n      applicationReference\n    }\n  }\n}\n`\n\nconst ApplicationValueChart = () => {\n\n    const [chartData, setChartData] = React.useState([])\n\n    const { loading } = useQuery(GET_APPLICATION_DATA, {\n        onCompleted: data => setChartData(() => data.applicationWithValues.nodes.map(item => ({\n            ...item,\n            applicationValue: Number(item.applicationValue)\n        })))\n    })\n\n    if (loading) return <CircularProgress />\n\n    return (\n        <div style={{ borderStyle: 'solid', borderWidth: '1px', background: \"#f2f2f2\" }}>\n            <h3 style={{ textDecoration: 'underline' }}>APPLIED VALUE BY APPLICATION</h3>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart\n                    data={chartData}\n                    margin={{\n                        top: 5,\n                        right: 10,\n                        left: 10,\n                        bottom: 25,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"applicationNumber\">\n                        <Label value=\"APPLICATION NUMBER\" offset={0} position=\"bottom\" />\n                    </XAxis>\n                    <YAxis tickFormatter={data => formatNumberNoDecimals(data)} allowDataOverflow={true} />\n                    <Tooltip formatter={(value, name) => [formatNumberNoDecimals(value), 'Application Value']} />\n                    <Bar dataKey=\"applicationValue\" fill=\"#003300\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default ApplicationValueChart;","import React from 'react';\nimport {gql, useQuery} from '@apollo/client'\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\nimport {CircularProgress} from '@mui/material';\nimport {Bar, BarChart, CartesianGrid, Label, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\n\nconst GET_AREA_DATA = gql`\nquery GetAreaData {\n  areaWithValues {\n    nodes {\n      areaId\n      areaDescription\n      valueComplete\n    }\n  }\n}\n`\n\nconst AreaValueChart = () => {\n\n    const [chartData, setChartData] = React.useState([])\n\n    const { loading } = useQuery(GET_AREA_DATA, {\n        fetchPolicy: 'network-only',\n        onCompleted: data => setChartData(() => data.areaWithValues.nodes.map(item => ({\n            ...item,\n            valueComplete: Number(item.valueComplete)\n        })))\n    })\n\n    if (loading) return <CircularProgress />\n\n    return (\n        <div style={{ borderStyle: 'solid', borderWidth: '1px', background: \"#f2f2f2\" }}>\n            <h3 style={{ textDecoration: 'underline' }}>VALUE COMPLETE BY AREA</h3>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart\n                    data={chartData}\n                    margin={{\n                        top: 5,\n                        right: 10,\n                        left: 10,\n                        bottom: 25,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"areaDescription\">\n                        <Label value=\"AREA\" offset={0} position=\"bottom\" />\n                    </XAxis>\n                    <YAxis tickFormatter={data => formatNumberNoDecimals(data)} allowDataOverflow={true} />\n                    <Tooltip formatter={(value, name) => [formatNumberNoDecimals(value), 'Area Value']} />\n                    <Bar dataKey=\"valueComplete\" fill=\"darkred\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default AreaValueChart;","import React from 'react';\nimport {gql, useQuery} from '@apollo/client'\nimport {Box, CircularProgress, Typography} from '@mui/material';\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\n\nconst GET_DASHBOARD_STATS = gql`\n    query GetDashboardStats {\n        contractDashboards {\n            nodes {\n                averagePeriodValue\n                contractTotalValueApplied\n                contractTotalValueToApply\n                contractTotalValueTodo\n                currentWeek\n                currentYear\n                totalContractOrderValue\n                totalContractValueComplete\n                totalOrdersReceived\n            }\n        }\n    }\n`\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                bgcolor: '#b4cce4',\n                p: 2,\n                ml: 0.25,\n                mr: 0.25,\n                flexGrow: 1,\n                borderWidth: 2,\n                borderStyle: 'solid',\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\nconst DashboardStats = () => {\n    const {data, loading} = useQuery(GET_DASHBOARD_STATS)\n\n    if (loading) return <CircularProgress/>\n\n    return (\n        <Box sx={{display: 'flex', ml: 0.5, mr: 0.5, mb: 3, mt: 3,}}>\n            <Item>\n                <Typography>CONTRACT CURRENT YEAR</Typography>\n                <Typography>\n                    {data.contractDashboards.nodes[0].currentYear}\n                </Typography>\n            </Item><Item>\n            <Typography>CONTRACT CURRENT WEEK</Typography>\n            <Typography>\n                {data.contractDashboards.nodes[0].currentWeek}\n            </Typography>\n        </Item>\n            <Item>\n                <Typography>CONTRACT ORDERS RECEIVED</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].totalOrdersReceived)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>CONTRACT ORDER VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].totalContractOrderValue)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>CONTRACT COMPLETE VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].totalContractValueComplete)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>CONTRACT TODO VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].contractTotalValueTodo)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>CONTRACT APPLIED VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].contractTotalValueApplied)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>CONTRACT TO APPLY VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].contractTotalValueToApply)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>AVERAGE PERIOD VALUE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.contractDashboards.nodes[0].averagePeriodValue)}\n                </Typography>\n            </Item>\n        </Box>\n    );\n};\n\nexport default DashboardStats;","import React from 'react';\nimport {Bar, BarChart, CartesianGrid, Label, LabelList, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\nimport {gql, useQuery} from '@apollo/client'\nimport {CircularProgress} from '@mui/material';\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\nconst GET_ORDER_VALUES = gql`\nquery GetOrderValues {\n  orderheaderWithValues(filter: {orderValueTotal: {greaterThan: \"0\"}} orderBy: ORDER_NUMBER_ASC) {\n    nodes {\n      orderNumber\n      orderValueTotalComplete\n      orderValueTotal\n    }\n  }\n}\n`\n\nconst OrderValueChart = () => {\n\n  const [chartData, setChartData] = React.useState([])\n\n  const { loading } = useQuery(GET_ORDER_VALUES, {\n    onCompleted: data => setChartData(data.orderheaderWithValues.nodes.map(item => ({\n      ...item,\n      \"Value Outstanding\": Number(item.orderValueTotal) - Number(item.orderValueTotalComplete),\n      \"Value Complete\": Number(item.orderValueTotalComplete),\n      orderValueTotal: formatNumberNoDecimals(item.orderValueTotal)\n    })))\n  })\n\n  if (loading) return <CircularProgress />\n\n  return (\n    <div style={{ borderStyle: 'solid', borderWidth: '1px', background: \"#f2f2f2\" }}>\n      <h3 style={{ textDecoration: 'underline' }}>ORDER VALUE BY ORDER NUMBER</h3>\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart\n          data={chartData}\n          margin={{\n            top: 5,\n            right: 10,\n            left: 10,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"orderNumber\">\n            <Label value=\"ORDER NUMBER\" offset={0} position=\"bottom\" />\n          </XAxis>\n          <YAxis tickFormatter={data => formatNumberNoDecimals(data)} allowDataOverflow={false} />\n          <Tooltip formatter={value => formatNumberNoDecimals(value)} />\n          <Bar dataKey=\"Value Complete\" fill=\"#00004d\" stackId=\"a\" />\n          <Bar dataKey=\"Value Outstanding\" fill=\"#4d4d4d\" stackId=\"a\">\n            <LabelList dataKey=\"orderValueTotal\" position=\"top\" />\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default OrderValueChart;","import React from 'react';\nimport {gql, useQuery} from '@apollo/client'\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\nimport {CircularProgress} from '@mui/material';\nimport {Bar, BarChart, CartesianGrid, Label, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\n\nconst GET_SUPERVISOR_DATA = gql`\nquery GetSupervisorData {\n  supervisorsWithValues {\n    nodes {\n      supervisorName\n      valueComplete\n    }\n  }\n}\n\n`\n\nconst SupervisorValueChart = () => {\n\n    const [chartData, setChartData] = React.useState([])\n\n    const { loading } = useQuery(GET_SUPERVISOR_DATA, {\n        onCompleted: data => setChartData(() => data.supervisorsWithValues.nodes.map(item => ({\n            ...item,\n            valueComplete: Number(item.valueComplete)\n        })))\n    })\n\n    if (loading) return <CircularProgress />\n\n    return (\n        <div style={{ borderStyle: 'solid', borderWidth: '1px', background: \"#f2f2f2\" }}>\n            <h3 style={{ textDecoration: 'underline' }}>SUPERVSIOR VALUES</h3>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart\n                    data={chartData}\n                    margin={{\n                        top: 5,\n                        right: 10,\n                        left: 10,\n                        bottom: 25,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"supervisorName\">\n                        <Label value=\"SUPERVISOR\" offset={0} position=\"bottom\" />\n                    </XAxis>\n                    <YAxis tickFormatter={data => formatNumberNoDecimals(data)} allowDataOverflow={true} />\n                    <Tooltip formatter={(value, name) => [formatNumberNoDecimals(value), 'Supervisor Value']} />\n                    <Bar dataKey=\"valueComplete\" fill=\"#26004d\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default SupervisorValueChart;","import React from 'react';\nimport {Bar, BarChart, CartesianGrid, Label, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\nimport {gql, useQuery} from '@apollo/client'\nimport {CircularProgress} from '@mui/material';\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\nimport * as PropTypes from \"prop-types\";\n\nconst GET_PERIOD_VALUES = gql`\n    query GetPeriodValues {\n        periodWithValues(filter: {worksValueCurrent: {greaterThan: \"0\"}}\n            last: 10\n            orderBy: PERIOD_NUMBER_ASC) {\n            nodes {\n                periodNumber\n                worksValueCurrent\n            }\n        }\n    }\n`\n\n/* const GET_PERIOD_AREA_VALUES = gql`\nquery GetPeriodAreaValues($period: Int!) {\n  commercialValuesByPeriodAndAreas(\n    filter: { periodNumber: { equalTo: $period } }\n  ) {\n    nodes {\n      area\n      periodNumber\n      periodValue\n    }\n  }\n}\n` */\n\nfunction ValueChartTest(props) {\n    return <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart\n            data={props.data}\n            margin={{\n                top: 5,\n                right: 10,\n                left: 10,\n                bottom: 25,\n            }}\n        >\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis dataKey=\"periodNumber\">\n                <Label value=\"PERIOD NUMBER\" offset={0} position=\"bottom\"/>\n            </XAxis>\n            <YAxis tickFormatter={props.tickFormatter}/>\n            <Tooltip formatter={props.formatter}/>\n            <Bar dataKey=\"worksValueCurrent\" fill=\"#4d004d\"/>\n        </BarChart>\n    </ResponsiveContainer>;\n}\n\nValueChartTest.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    tickFormatter: PropTypes.func,\n    formatter: PropTypes.func\n};\nconst WeeklyValueChart = () => {\n\n    const [chartData, setChartData] = React.useState([])\n\n    const {loading} = useQuery(GET_PERIOD_VALUES, {\n        onCompleted: data => setChartData(() => data.periodWithValues.nodes.map(item => ({\n            ...item,\n            worksValueCurrent: Number(item.worksValueCurrent)\n        })))\n    })\n\n    if (loading) return <CircularProgress/>\n\n    return (\n        <div style={{borderStyle: 'solid', borderWidth: '1px', background: \"#f2f2f2\"}}>\n            <h3 style={{textDecoration: 'underline'}}>VALUE COMPLETE BY PERIOD</h3>\n            <ValueChartTest data={chartData} tickFormatter={data => formatNumberNoDecimals(data)}\n                            formatter={(value, name) => [formatNumberNoDecimals(value), 'Period Value']}/>\n        </div>\n    );\n};\n\nexport default WeeklyValueChart;","/** @format */\n\nimport {Box, Grid} from '@mui/material';\nimport React from 'react';\nimport ApplicationValueChart from './ApplicationValueChart';\nimport AreaValueChart from './AreaValueChart';\nimport DashboardStats from './DashboardStats';\nimport OrderValueChart from './OrderValueChart';\nimport SupervisorValueChart from './SupervisorValueChart';\nimport WeeklyValueChart from './WeeklyValueChart';\n\nconst ContractDashboard = () => {\n    return (\n        <>\n            <DashboardStats/>\n            <Box sx={{display: 'flex', ml: 1, mr: 1}}>\n                <Grid container spacing={2} mt={1}>\n                    <Grid item xs={3}>\n                        <WeeklyValueChart/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <OrderValueChart/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <ApplicationValueChart/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <AreaValueChart/>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <SupervisorValueChart/>\n                    </Grid>\n                </Grid>\n            </Box>\n        </>\n    );\n};\n\nexport default ContractDashboard;\n","/** @format */\n\nimport {DateTime} from 'luxon';\nimport numeral from 'numeral';\n\nexport const formatNumberGridNoDecimals = (number) =>\n    numeral(number.value).format('0,0');\nexport const formatNumberGridTwoDecimals = (number) =>\n    numeral(number.value).format('0,0.00');\n\nexport const formatNumberNoDecimals = (number) => numeral(number).format('0,0');\nexport const formatNumberTwoDecimals = (number) =>\n    numeral(number).format('0,0.00');\n\nexport const formatDateGrid = (date) =>\n    DateTime.fromISO(date.value).toFormat('dd/LL/y');\nexport const formatDate = (date) => DateTime.fromISO(date).toFormat('dd/LL/y');\nexport const formatExifDate = (date) =>\n    DateTime.fromFormat(date.slice(0, 10).replace(/:/g, '/'), 'y/LL/dd').toFormat(\n        'dd/LL/y',\n    );\n\nexport const formatDateGridText = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\nexport const formatDateText = (date) => DateTime(date).toFormat('dd/LL/y');\n\nexport const convertDateToLocal = date => DateTime.fromISO(date.slice(0, 10)).toFormat('dd/LL/y')\n\n\nexport const parseDateGrid = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\n\nexport const removeCommon = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return !first.includes(el) && second.includes(el);\n    });\n};\n\nexport const removedFromInitial = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return first.includes(el) && !second.includes(el);\n    });\n};\n\nexport const numberOnly = (event) => {\n    return (\n        event.key === '1' ||\n        event.key === '2' ||\n        event.key === '3' ||\n        event.key === '4' ||\n        event.key === '5' ||\n        event.key === '6' ||\n        event.key === '7' ||\n        event.key === '8' ||\n        event.key === '9' ||\n        event.key === '0' ||\n        event.key === '.'\n    );\n};\n\nexport const setDelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nexport const textTruncate = (str, length, ending) => {\n    if (length == null) {\n        length = 100;\n    }\n    if (ending == null) {\n        ending = '...';\n    }\n    if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n    } else {\n        return str;\n    }\n};\n\nexport const getFirstLetters = (str) => {\n    return str\n        .split(' ')\n        .map((word) => word[0])\n        .join('');\n};\n\nexport const fixKeys = (fn) => (obj) =>\n    Object.fromEntries(\n        Object.entries(obj).map(([k, v]) => [\n            fn(k),\n            Array.isArray(v)\n                ? v.map(fixKeys(fn))\n                : typeof v == 'object'\n                    ? fixKeys(fn)(v)\n                    : v,\n        ]),\n    );\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nexport const camelCase = (s) => s.replace(/_(.)/g, (s, c) => c.toUpperCase());\n\nexport const snakeCase = (s) => s.replace(/_(.)/g, (s, c) => c.toLowerCase());\n\nexport const camelizeKeys = fixKeys(camelCase);\n\nexport const SnakeCaseToWords = fixKeys(snakeCase)\n\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n\n/**\n * \"Safer\" String.toUpperCase()\n */\nexport function upperCase(str) {\n    return str.toUpperCase();\n}\n\n\nexport function properCase(str) {\n    return str.split(' ').map((word) => {\n        return word[0].toUpperCase() + word.substring(1);\n    }).join(\" \");\n}\n\n//const words = mySentence.split(\" \");\n\n//words.map((word) => {\n//\treturn word[0].toUpperCase() + word.substring(1);\n//}).join(\" \");\n\nexport const formatNumberForExcel = (num) => {\n    const m = Number((Math.abs(num) * 100).toPrecision(15));\n    return Math.round(m) / 100 * Math.sign(num);\n}\n\nexport function divideIfNotZero(numerator, denominator) {\n    if (denominator === 0 || isNaN(denominator)) {\n        return null;\n    } else {\n        return numerator / denominator;\n    }\n}\n\nexport function renameKeys(obj, newKeys) {\n    const keyValues = Object.keys(obj).map(key => {\n        const newKey = newKeys[key] || key;\n        return {[newKey]: obj[key]};\n    });\n    return Object.assign({}, ...keyValues);\n}"],"sourceRoot":""}