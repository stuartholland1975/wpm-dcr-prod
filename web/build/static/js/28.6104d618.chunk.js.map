{"version":3,"sources":["components/application-admin/ApplicationStats.js","components/button-bars/ApplicationProcessingButtons.js","components/grids/AvailableOrdersList.js","components/grids/AvailableLocationsList.js","components/grids/AvailableItemsList.js","components/application-admin/ApplicationAdmin.js","functions/commonFunctions.js","../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js"],"names":["Item","props","sx","other","Box","bgcolor","p","ml","mr","flexGrow","borderWidth","borderStyle","ApplicationStats","data","display","gridTemplateColumns","Typography","fontWeight","applicationNumber","applicationReference","formatDate","applicationDate","color","applicationOpen","applicationSubmitted","applicationCurrent","formatNumberNoDecimals","applicationValue","orderCount","locationCount","itemCount","imageCount","areaCount","textAlign","ApplicationProcessingButtons","submit","selectedItem","useReactiveVar","gridSelectionsVar","mb","Button","disabled","onClick","fullWidth","columnDefs","headerName","field","editable","sort","cellStyle","minWidth","maxWidth","type","valueGetter","params","orderValueTotalComplete","orderValueTotalApplied","valueFormatter","formatNumberGridTwoDecimals","defaultColDef","filter","sortable","resizable","flex","AvailableOrdersList","gridOptions","pagination","paginationPageSize","domLayout","animateRows","rowSelection","onRowSelected","selected","api","getSelectedNodes","length","selectedOrder","selectedLocation","className","style","margin","textDecoration","rowData","onGridReady","sizeColumnsToFit","reactUi","onGridSizeChanged","valueComplete","valueApplied","AvailableLocationsList","gridData","obj","orderheaderId","id","overlayNoRowsTemplate","qtyComplete","qtyApplied","AvailableItemsList","sitelocationId","rowMultiSelectWithClick","selectedWorksheetValues","map","item","reduce","total","amount","worksheetsValue","selectedWorksheetIds","worksheetId","dataArray","forEach","push","selectedWorksheetsVar","GET_CURRENT_APPLICATION","gql","GET_DATA_AVAILABLE_FOR_APPLICATION","ADD_WORKSHEETS_TO_APPLICATION","ApplicationAdmin","React","useState","availableOrders","setAvailableOrders","availableLocations","setAvailableLocations","availableItems","setAvailableItems","worksheets","useQuery","fetchPolicy","loading","onCompleted","orderGridData","wpmGraphqlGetOrdersAvailableForApplication","nodes","wpmGraphqlGetLocationsAvailableForApplication","locationGridData","wpmGraphqlGetItemsAvailableForApplication","itemGridData","worksheetCount","wpmGraphqlGetWorksheetsAvailableForApplication","orderdetailId","refetch","useMutation","refetchQueries","query","awaitRefetchQueries","processWorksheets","CircularProgress","m","confirmAlert","customUI","onClose","formatNumberTwoDecimals","variables","then","applicationWithValues","Grid","container","spacing","xs","formatNumberGridNoDecimals","number","numeral","value","format","formatDateGrid","date","DateTime","fromISO","toFormat","removeCommon","first","second","el","includes","removedFromInitial","numberOnly","event","key","getFirstLetters","str","split","word","join","fixKeys","fn","Object","fromEntries","entries","k","v","Array","isArray","s","replace","c","toUpperCase","toLowerCase","divideIfNotZero","numerator","denominator","isNaN","renameKeys","newKeys","keyValues","keys","newKey","assign","GridContext","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","gridClasses","generateUtilityClasses","direction","wrap","size","_excluded","getOffset","val","parse","parseFloat","String","resolveSpacingClasses","styles","Number","sm","md","lg","xl","GridRoot","styled","name","overridesResolver","ownerState","zeroMinWidth","root","_extends","boxSizing","flexWrap","width","theme","directionValues","resolveBreakpointValues","values","breakpoints","handleBreakpoints","propValue","output","flexDirection","indexOf","rowSpacing","rowSpacingValues","themeSpacing","marginTop","paddingTop","columnSpacing","columnSpacingValues","marginLeft","paddingLeft","globalStyles","breakpoint","flexBasis","flexShrink","columnsBreakpointValues","columns","columnValue","undefined","Math","round","more","up","inProps","ref","themeProps","useThemeProps","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","_objectWithoutPropertiesLoose","columnsContext","classes","slots","composeClasses","useUtilityClasses","_jsx","Provider","children","clsx","as"],"mappings":"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","file":"static/js/28.6104d618.chunk.js","sourcesContent":["import React from 'react';\nimport {Box, Typography} from '@mui/material'\nimport {formatDate, formatNumberNoDecimals} from '../../functions/commonFunctions'\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                bgcolor: '#b4cce4',\n                p: 2,\n                ml: 0.25,\n                mr: 0.25,\n                flexGrow: 1,\n                borderWidth: 2,\n                borderStyle: 'solid',\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\n\nconst ApplicationStats = ({data}) => {\n    return (\n        <Box sx={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(12, 1fr)',\n            ml: 0.5,\n            mr: 0.5,\n        }}>\n            <Item>\n                <Typography>APPLICATION NUMBER</Typography>\n                <Typography fontWeight='bold'>{data.applicationNumber}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION REFERENCE</Typography>\n                <Typography fontWeight='bold'>{data.applicationReference}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION DATE</Typography>\n                <Typography>{formatDate(data.applicationDate)}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION OPEN</Typography>\n                <Typography fontWeight='bold'\n                            color={data.applicationOpen ? \"navy\" : \"red\"}>{data.applicationOpen ? \"TRUE\" : \"FALSE\"}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION SUBMITTED</Typography>\n                <Typography fontWeight='bold'\n                            color={data.applicationSubmitted ? \"navy\" : \"red\"}>{data.applicationSubmitted ? \"TRUE\" : \"FALSE\"}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION CURRENT</Typography>\n                <Typography fontWeight='bold'\n                            color={data.applicationCurrent ? \"navy\" : \"red\"}>{data.applicationCurrent ? \"TRUE\" : \"FALSE\"}</Typography>\n            </Item>\n            <Item>\n                <Typography>APPLICATION VALUE</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.applicationValue)}</Typography>\n            </Item>\n            <Item>\n                <Typography>ORDER COUNT</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.orderCount)}</Typography>\n            </Item>\n            <Item>\n                <Typography>LOCATION COUNT</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.locationCount)}</Typography>\n            </Item>\n            <Item>\n                <Typography>ITEM COUNT</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.itemCount)}</Typography>\n            </Item>\n            <Item>\n                <Typography>IMAGE COUNT</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.imageCount)}</Typography>\n            </Item>\n            <Item>\n                <Typography>AREA COUNT</Typography>\n                <Typography\n                    fontWeight='bold'>{formatNumberNoDecimals(data.areaCount)}</Typography>\n            </Item>\n        </Box>\n    );\n};\n\n\nexport default ApplicationStats;","import {Box} from '@mui/material';\nimport {useReactiveVar} from '@apollo/client'\nimport {gridSelectionsVar} from '../../cache';\nimport Button from \"@mui/material/Button\";\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                textAlign: 'center',\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\nconst ApplicationProcessingButtons = ({submit}) => {\n    const selectedItem = useReactiveVar(gridSelectionsVar).selectedItem\n\n    return (\n        <Box sx={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', mb: 2}}>\n            <Item>\n                <Button\n                    color='action'\n                    disabled={selectedItem === false}\n                    onClick={submit}\n                    fullWidth>\n                    ADD ITEMS TO APPLICATION\n                </Button>\n            </Item>\n            <Item>\n\n            </Item>\n\n        </Box>\n    );\n};\n\nexport default ApplicationProcessingButtons;","import React from 'react';\nimport {gridSelectionsVar} from '../../cache';\nimport {formatNumberGridTwoDecimals} from '../../functions/commonFunctions';\nimport {AgGridReact} from 'ag-grid-react';\n\nconst columnDefs = [\n    {\n        headerName: \"Order Number\",\n        field: \"orderNumber\",\n        editable: true,\n        sort: \"asc\",\n        cellStyle: { textAlign: 'left' }\n    },\n    {\n        headerName: \"Project Title\",\n        field: \"projectTitle\",\n        minWidth: 400,\n        editable: true,\n        cellStyle: { textAlign: 'left' }\n    },\n    {\n        headerName: \"Area\",\n        field: \"area\",\n        editable: true,\n        maxWidth: 100,\n        cellStyle: { textAlign: 'left' }\n    },\n    {\n        headerName: \"Available Value\",\n        cellStyle: { fontWeight: \"bold\" },\n        type: \"numericColumn\",\n        valueGetter: params => params.data.orderValueTotalComplete - params.data.orderValueTotalApplied,\n        valueFormatter: formatNumberGridTwoDecimals,\n    },\n    {\n        headerName: \"Location Count\",\n        type: \"numericColumn\",\n        field: \"locationCount\",\n    },\n    {\n        headerName: \"Image Count\",\n        type: \"numericColumn\",\n        field: \"imageCount\",\n    },\n]\n\nconst defaultColDef = {\n    filter: true,\n    sortable: true,\n    resizable: true,\n    flex: true,\n};\n\n\n\n\nconst AvailableOrdersList = ({ data }) => {\n\n    const gridOptions = {\n        columnDefs,\n        defaultColDef,\n        pagination: true,\n        paginationPageSize: 10,\n        domLayout: 'autoHeight',\n        animateRows: true,\n        rowSelection: 'single',\n        onRowSelected: selectedRow,\n    };\n\n    function selectedRow(params) {\n        const selected = params.api.getSelectedNodes();\n        if (selected.length > 0) {\n            gridSelectionsVar({\n                ...gridSelectionsVar(),\n                selectedOrder: selected[0].data,\n                selectedItem: false,\n                selectedLocation: false\n            });\n        } else {\n            gridSelectionsVar({ ...gridSelectionsVar(), selectedOrder: false, selectedLocation: false, selectedItem: false });\n        }\n    }\n\n    const onGridReady = (params) => {\n        params.api.sizeColumnsToFit();\n        gridSelectionsVar({\n            ...gridSelectionsVar(),\n            selectedOrder: false\n        })\n    };\n\n\n    return (\n        <div className='ag-theme-custom-react' style={{ margin: 5 }}>\n            <h3 style={{ textDecoration: \"underline\" }}>ORDERS AVAILABLE FOR APPLICATION</h3>\n            <AgGridReact\n                gridOptions={gridOptions}\n                rowData={data}\n                onGridReady={onGridReady}\n                reactUi={true}\n                onGridSizeChanged={(params) => params.api.sizeColumnsToFit()}\n            />\n        </div>\n    );\n};\n\n\n\nexport default AvailableOrdersList;","import React from 'react';\nimport {AgGridReact} from 'ag-grid-react';\nimport {gridSelectionsVar} from '../../cache';\nimport {formatNumberGridTwoDecimals} from '../../functions/commonFunctions';\nimport {useReactiveVar} from '@apollo/client';\n\n\nconst columnDefs = [\n    {\n        headerName: \"Worksheet Ref\",\n        field: \"worksheetReference\",\n        sort: \"asc\",\n        cellStyle: {textAlign: 'left'}\n    },\n    {\n        headerName: \"Location\",\n        field: \"reference\",\n        cellStyle: {textAlign: 'left'}\n    },\n    {\n        headerName: \"Available Value\",\n        cellStyle: {fontWeight: \"bold\"},\n        type: \"numericColumn\",\n        valueGetter: params => params.data.valueComplete - params.data.valueApplied,\n        valueFormatter: formatNumberGridTwoDecimals,\n    },\n    {\n        headerName: \"Item Count\",\n        type: \"numericColumn\",\n        field: \"itemCount\",\n    },\n    {\n        headerName: \"Image Count\",\n        type: \"numericColumn\",\n        field: \"imageCount\",\n    },\n]\n\nconst defaultColDef = {\n    filter: true,\n    sortable: true,\n    resizable: true,\n    flex: true,\n};\n\n\nconst AvailableLocationsList = ({data}) => {\n\n    const selectedOrder = useReactiveVar(gridSelectionsVar).selectedOrder\n\n    const gridData = data.filter(obj => obj.orderheaderId === selectedOrder.id)\n    const gridOptions = {\n        columnDefs,\n        defaultColDef,\n        pagination: true,\n        paginationPageSize: 25,\n        domLayout: 'autoHeight',\n        animateRows: true,\n        rowSelection: 'single',\n        onRowSelected: selectedRow,\n        overlayNoRowsTemplate:\n            '<h3 style=\"padding: 8px; border: 2px solid #444; background: #e6e6e6\">Please Select An Order From The Above Table</h3>',\n    };\n\n    function selectedRow(params) {\n        const selected = params.api.getSelectedNodes();\n        if (selected.length > 0) {\n            gridSelectionsVar({\n                ...gridSelectionsVar(),\n                selectedLocation: selected[0].data.id,\n            });\n        } else {\n            gridSelectionsVar({...gridSelectionsVar(), selectedLocation: false, selectedItem: false});\n        }\n    }\n\n    const onGridReady = (params) => {\n        params.api.sizeColumnsToFit();\n        gridSelectionsVar({...gridSelectionsVar(), selectedLocation: false});\n    };\n    return (\n        <div className='ag-theme-custom-react' style={{margin: 5}}>\n            <h3 style={{textDecoration: \"underline\"}}>LOCATIONS AVAILABLE FOR APPLICATION</h3>\n            <AgGridReact\n                gridOptions={gridOptions}\n                rowData={gridData}\n                onGridReady={onGridReady}\n                reactUi={true}\n                onGridSizeChanged={(params) => params.api.sizeColumnsToFit()}\n            />\n        </div>\n    );\n};\n\nexport default AvailableLocationsList;","import React from 'react';\nimport {AgGridReact} from 'ag-grid-react';\nimport {useReactiveVar} from '@apollo/client';\nimport {gridSelectionsVar, selectedWorksheetsVar} from '../../cache';\nimport {formatNumberGridTwoDecimals} from '../../functions/commonFunctions';\n\nconst columnDefs = [\n\t{\n\t\theaderName: \"Worksheet Ref\",\n\t\tfield: \"worksheetReference\",\n\t\tsort: \"asc\",\n\t\tcellStyle: {textAlign: 'left'}\n\t},\n\t{\n\t\theaderName: \"Item Number\",\n\t\tfield: \"itemNumber\",\n\t\tcellStyle: {textAlign: 'left'},\n\t\tsort: 'asc',\n\t},\n\t{\n\t\theaderName: \"Activity Code\",\n\t\tfield: \"activityCode\",\n\t\tcellStyle: {textAlign: 'left'}\n\t},\n\t{\n\t\theaderName: \"Activity Description\",\n\t\tfield: \"activityDescription\",\n\t\tcellStyle: {textAlign: 'left'}\n\t},\n\t{\n\t\theaderName: \"Available Qty\",\n\t\tcellStyle: {fontWeight: \"bold\"},\n\t\ttype: \"numericColumn\",\n\t\tvalueGetter: params => params.data.qtyComplete - params.data.qtyApplied,\n\t\tvalueFormatter: formatNumberGridTwoDecimals,\n\t},\n\t{\n\t\theaderName: \"Available Value\",\n\t\tcellStyle: {fontWeight: \"bold\"},\n\t\ttype: \"numericColumn\",\n\t\tvalueGetter: params => params.data.valueComplete - params.data.valueApplied,\n\t\tvalueFormatter: formatNumberGridTwoDecimals,\n\t},\n\t{\n\t\theaderName: \"Worksheet Count\",\n\t\ttype: \"numericColumn\",\n\t\tfield: \"worksheetCount\",\n\t},\n\n]\n\nconst defaultColDef = {\n\tfilter: true,\n\tsortable: true,\n\tresizable: true,\n\tflex: true,\n};\n\nconst AvailableItemsList = ({data}) => {\n\n\tconst selectedLocation = useReactiveVar (gridSelectionsVar).selectedLocation\n\n\tconst selectedOrder = useReactiveVar (gridSelectionsVar).selectedOrder\n\n\tconst gridData = data.filter (obj => obj.sitelocationId === selectedLocation && obj.orderheaderId === selectedOrder.id)\n\n\tconst gridOptions = {\n\t\tcolumnDefs,\n\t\tdefaultColDef,\n\t\tpagination: true,\n\t\tpaginationPageSize: 25,\n\t\tdomLayout: 'autoHeight',\n\t\tanimateRows: true,\n\t\trowSelection: 'multiple',\n\t\trowMultiSelectWithClick: true,\n\n\t\tonRowSelected: selectedRow,\n\t\toverlayNoRowsTemplate:\n\t\t\t'<h3 style=\"padding: 8px; border: 2px solid #444; background: #e6e6e6\">No Location Selected</h3>',\n\t};\n\n\n\tfunction selectedRow (params) {\n\t\tconst selected = params.api.getSelectedNodes ();\n\t\tif ( selected.length > 0 ) {\n\t\t\tconst selectedWorksheetValues = selected.map (item => item.data.valueComplete - item.data.valueApplied).reduce ((total, amount) => total + amount)\n\t\t\tgridSelectionsVar ({\n\t\t\t\t...gridSelectionsVar (),\n\t\t\t\tselectedItem: selected[0].data.id,\n\t\t\t\tworksheetsValue: selectedWorksheetValues\n\t\t\t});\n\t\t\tconst selectedWorksheetIds = selected.map (item => item.data.worksheetId)\n\n\t\t\tlet dataArray = []\n\t\t\tselectedWorksheetIds.forEach (item => dataArray.push (...item))\n\t\t\tselectedWorksheetsVar (\n\t\t\t\tdataArray\n\t\t\t);\n\t\t} else {\n\t\t\tgridSelectionsVar ({...gridSelectionsVar (), selectedItem: false});\n\t\t}\n\t}\n\n\tconst onGridReady = (params) => {\n\t\tparams.api.sizeColumnsToFit ();\n\t\tgridSelectionsVar ({...gridSelectionsVar (), selectedItem: false});\n\t};\n\treturn (\n\t\t<div className='ag-theme-custom-react' style={{margin: 5}}>\n\t\t\t<h3 style={{textDecoration: \"underline\"}}>ITEMS AVAILABLE FOR APPLICATION</h3>\n\t\t\t<AgGridReact\n\t\t\t\tgridOptions={gridOptions}\n\t\t\t\trowData={gridData}\n\t\t\t\tonGridReady={onGridReady}\n\t\t\t\treactUi={true}\n\t\t\t\tonGridSizeChanged={(params) => params.api.sizeColumnsToFit ()}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default AvailableItemsList;","/** @format */\n\nimport React from 'react';\nimport {gql, useMutation, useQuery, useReactiveVar} from '@apollo/client';\nimport {Box, CircularProgress, Grid} from '@mui/material';\nimport ApplicationStats from './ApplicationStats';\nimport ApplicationProcessingButtons from '../button-bars/ApplicationProcessingButtons';\nimport AvailableOrdersList from '../grids/AvailableOrdersList';\nimport AvailableLocationsList from '../grids/AvailableLocationsList';\nimport AvailableItemsList from '../grids/AvailableItemsList';\nimport {gridSelectionsVar, selectedWorksheetsVar} from '../../cache';\nimport {confirmAlert} from 'react-confirm-alert';\nimport {formatNumberTwoDecimals} from '../../functions/commonFunctions';\n\nconst GET_CURRENT_APPLICATION = gql`\n    query GetCurrentApplication {\n        applicationWithValues(condition: { applicationCurrent: true }) {\n            nodes {\n                id\n                applicationReference\n                applicationCurrent\n                applicationDate\n                applicationNumber\n                applicationOpen\n                applicationSubmitted\n                applicationValue\n                dateSubmitted\n                imageCount\n                itemCount\n                locationCount\n                orderCount\n                submissionReference\n                areaCount\n            }\n        }\n    }\n`;\nconst GET_DATA_AVAILABLE_FOR_APPLICATION = gql`\n    query GetDataAvailableForApplication {\n        wpmGraphqlGetOrdersAvailableForApplication {\n            nodes {\n                area\n                id\n                orderNumber\n                projectTitle\n                statusDescription\n                workType\n                orderValueTotalApplied\n                orderValueTotalComplete\n                imageCount\n            }\n        }\n        wpmGraphqlGetLocationsAvailableForApplication {\n            nodes {\n                id\n                orderheaderId\n                reference\n                worksheetReference\n                imageCount\n                valueApplied\n                valueComplete\n            }\n        }\n        wpmGraphqlGetItemsAvailableForApplication {\n            nodes {\n                id\n                itemNumber\n                orderNumber\n                orderheaderId\n                projectTitle\n                worksheetReference\n                sitelocationId\n                valueComplete\n                valueApplied\n                activityCode\n                activityDescription\n                qtyComplete\n                qtyApplied\n            }\n        }\n        wpmGraphqlGetWorksheetsAvailableForApplication {\n            nodes {\n                id\n                itemNumber\n                applied\n                qtyComplete\n                valueComplete\n                worksheetReference\n                orderdetailId\n            }\n        }\n    }\n`;\nconst ADD_WORKSHEETS_TO_APPLICATION = gql`\n    mutation AddWorksheetsToApplication($id: [Int!]) {\n        addWorksheetsToApplication(input: { worksheetId: $id }) {\n            clientMutationId\n        }\n    }\n`;\nconst ApplicationAdmin = () => {\n    const [availableOrders, setAvailableOrders] = React.useState([]);\n    const [availableLocations, setAvailableLocations] = React.useState([]);\n    const [availableItems, setAvailableItems] = React.useState([]);\n    const worksheets = useReactiveVar(selectedWorksheetsVar);\n\n    const {data, loading} = useQuery(GET_CURRENT_APPLICATION, {\n        fetchPolicy: 'cache-and-network',\n    });\n\n    const {refetch} = useQuery(GET_DATA_AVAILABLE_FOR_APPLICATION, {\n        fetchPolicy: 'cache-and-network',\n        onCompleted: (data) => {\n            const orderData = data.wpmGraphqlGetOrdersAvailableForApplication.nodes;\n            const orderGridData = orderData.map((item) => ({\n                ...item,\n                locationCount:\n                data.wpmGraphqlGetLocationsAvailableForApplication.nodes.filter(\n                    (obj) => obj.orderheaderId === item.id,\n                ).length,\n            }));\n            setAvailableOrders(orderGridData);\n            const locationData =\n                data.wpmGraphqlGetLocationsAvailableForApplication.nodes;\n            const locationGridData = locationData.map((item) => ({\n                ...item,\n                itemCount: data.wpmGraphqlGetItemsAvailableForApplication.nodes.filter(\n                    (obj) => obj.sitelocationId === item.id,\n                ).length,\n            }));\n            setAvailableLocations(locationGridData);\n            const itemData = data.wpmGraphqlGetItemsAvailableForApplication.nodes;\n            const itemGridData = itemData.map((item) => ({\n                ...item,\n                worksheetCount:\n                data.wpmGraphqlGetWorksheetsAvailableForApplication.nodes.filter(\n                    (obj) => obj.orderdetailId === item.id,\n                ).length,\n                worksheetId: data.wpmGraphqlGetWorksheetsAvailableForApplication.nodes\n                    .filter((obj) => obj.orderdetailId === item.id)\n                    .map((item) => item.id),\n            }));\n\n            setAvailableItems(itemGridData);\n        },\n    });\n\n    const [processWorksheets] = useMutation(ADD_WORKSHEETS_TO_APPLICATION, {\n        refetchQueries: [\n            {query: GET_DATA_AVAILABLE_FOR_APPLICATION},\n            {query: GET_CURRENT_APPLICATION},\n        ],\n\n        awaitRefetchQueries: true,\n        onCompleted: (data) => refetch(),\n    });\n\n    const processData = () => {\n        if (worksheets.length > 0) {\n            confirmAlert({\n                customUI: ({onClose}) => {\n                    return (\n                        <div className='custom-ui'>\n                            <h1>Confirm Submission</h1>\n                            <p>{`Submission Value Is: ${formatNumberTwoDecimals(\n                                gridSelectionsVar().worksheetsValue,\n                            )}`}</p>\n                            <button\n                                onClick={() =>\n                                    processWorksheets({\n                                        variables: {\n                                            id: worksheets,\n                                        },\n                                    }).then(() => onClose())\n                                }>\n                                SUBMIT\n                            </button>\n                            <button\n                                onClick={() => {\n                                    onClose();\n                                }}>\n                                CANCEL\n                            </button>\n                        </div>\n                    );\n                },\n            });\n        }\n    };\n\n    if (loading) return <CircularProgress/>;\n\n    return (\n        <Box m={3}>\n            <br/>\n            <ApplicationProcessingButtons submit={processData}/>\n            <ApplicationStats data={data.applicationWithValues.nodes[0]}/>\n            <hr/>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <AvailableOrdersList data={availableOrders}/>\n                    <AvailableLocationsList data={availableLocations}/>\n                </Grid>\n\n                <Grid item xs={6}>\n                    <AvailableItemsList data={availableItems}/>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default ApplicationAdmin;\n","/** @format */\n\nimport {DateTime} from 'luxon';\nimport numeral from 'numeral';\n\nexport const formatNumberGridNoDecimals = (number) =>\n    numeral(number.value).format('0,0');\nexport const formatNumberGridTwoDecimals = (number) =>\n    numeral(number.value).format('0,0.00');\n\nexport const formatNumberNoDecimals = (number) => numeral(number).format('0,0');\nexport const formatNumberTwoDecimals = (number) =>\n    numeral(number).format('0,0.00');\n\nexport const formatDateGrid = (date) =>\n    DateTime.fromISO(date.value).toFormat('dd/LL/y');\nexport const formatDate = (date) => DateTime.fromISO(date).toFormat('dd/LL/y');\nexport const formatExifDate = (date) =>\n    DateTime.fromFormat(date.slice(0, 10).replace(/:/g, '/'), 'y/LL/dd').toFormat(\n        'dd/LL/y',\n    );\n\nexport const formatDateGridText = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\nexport const formatDateText = (date) => DateTime(date).toFormat('dd/LL/y');\n\nexport const convertDateToLocal = date => DateTime.fromISO(date.slice(0, 10)).toFormat('dd/LL/y')\n\n\nexport const parseDateGrid = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\n\nexport const removeCommon = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return !first.includes(el) && second.includes(el);\n    });\n};\n\nexport const removedFromInitial = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return first.includes(el) && !second.includes(el);\n    });\n};\n\nexport const numberOnly = (event) => {\n    return (\n        event.key === '1' ||\n        event.key === '2' ||\n        event.key === '3' ||\n        event.key === '4' ||\n        event.key === '5' ||\n        event.key === '6' ||\n        event.key === '7' ||\n        event.key === '8' ||\n        event.key === '9' ||\n        event.key === '0' ||\n        event.key === '.'\n    );\n};\n\nexport const setDelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nexport const textTruncate = (str, length, ending) => {\n    if (length == null) {\n        length = 100;\n    }\n    if (ending == null) {\n        ending = '...';\n    }\n    if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n    } else {\n        return str;\n    }\n};\n\nexport const getFirstLetters = (str) => {\n    return str\n        .split(' ')\n        .map((word) => word[0])\n        .join('');\n};\n\nexport const fixKeys = (fn) => (obj) =>\n    Object.fromEntries(\n        Object.entries(obj).map(([k, v]) => [\n            fn(k),\n            Array.isArray(v)\n                ? v.map(fixKeys(fn))\n                : typeof v == 'object'\n                    ? fixKeys(fn)(v)\n                    : v,\n        ]),\n    );\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nexport const camelCase = (s) => s.replace(/_(.)/g, (s, c) => c.toUpperCase());\n\nexport const snakeCase = (s) => s.replace(/_(.)/g, (s, c) => c.toLowerCase());\n\nexport const camelizeKeys = fixKeys(camelCase);\n\nexport const SnakeCaseToWords = fixKeys(snakeCase)\n\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n\n/**\n * \"Safer\" String.toUpperCase()\n */\nexport function upperCase(str) {\n    return str.toUpperCase();\n}\n\n\nexport function properCase(str) {\n    return str.split(' ').map((word) => {\n        return word[0].toUpperCase() + word.substring(1);\n    }).join(\" \");\n}\n\n//const words = mySentence.split(\" \");\n\n//words.map((word) => {\n//\treturn word[0].toUpperCase() + word.substring(1);\n//}).join(\" \");\n\nexport const formatNumberForExcel = (num) => {\n    const m = Number((Math.abs(num) * 100).toPrecision(15));\n    return Math.round(m) / 100 * Math.sign(num);\n}\n\nexport function divideIfNotZero(numerator, denominator) {\n    if (denominator === 0 || isNaN(denominator)) {\n        return null;\n    } else {\n        return numerator / denominator;\n    }\n}\n\nexport function renameKeys(obj, newKeys) {\n    const keyValues = Object.keys(obj).map(key => {\n        const newKey = newKeys[key] || key;\n        return {[newKey]: obj[key]};\n    });\n    return Object.assign({}, ...keyValues);\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst GridContext = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\n\nexport default GridContext;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth', // spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`), // direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`), // wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"lg\", \"md\", \"rowSpacing\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n\n    if (!size) {\n      return globalStyles;\n    }\n\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      } // Keep 7 significant numbers.\n\n\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      } // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    } // No need for a media query for the first size.\n\n\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function resolveSpacingClasses(spacing, container, styles = {}) {\n  // in case of grid item or undefined/null or `spacing` <= 0\n  if (!container || !spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`] || `spacing-xs-${String(spacing)}`];\n  } // in case of object `spacing`\n\n\n  const {\n    xs,\n    sm,\n    md,\n    lg,\n    xl\n  } = spacing;\n  return [Number(xs) > 0 && (styles[`spacing-xs-${String(xs)}`] || `spacing-xs-${String(xs)}`), Number(sm) > 0 && (styles[`spacing-sm-${String(sm)}`] || `spacing-sm-${String(sm)}`), Number(md) > 0 && (styles[`spacing-md-${String(md)}`] || `spacing-md-${String(md)}`), Number(lg) > 0 && (styles[`spacing-lg-${String(lg)}`] || `spacing-lg-${String(lg)}`), Number(xl) > 0 && (styles[`spacing-xl-${String(xl)}`] || `spacing-xl-${String(xl)}`)];\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      container,\n      direction,\n      item,\n      lg,\n      md,\n      sm,\n      spacing,\n      wrap,\n      xl,\n      xs,\n      zeroMinWidth\n    } = props.ownerState;\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...resolveSpacingClasses(spacing, container, styles), direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    spacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...resolveSpacingClasses(spacing, container), direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    lg = false,\n    md = false,\n    rowSpacing: rowSpacingProp,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // columns set with default breakpoint unit of 12\n\n  const columns = container ? columnsProp || 12 : columnsContext;\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;"],"sourceRoot":""}