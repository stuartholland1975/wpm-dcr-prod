{"version":3,"sources":["components/button-bars/OrderAdminButtons.js","components/grids/OrderWorksheetsGrid.js","components/order-admin/LocationImages.js","gql/mutations/worksheets.js","components/button-bars/OrderItemProgressButtons.js","components/grids/cell-renderers/SimpleDateEditor.js","components/grids/cell-renderers/SimpleNumericEditor.js","components/grids/cell-renderers/SimpleSelectEditor.js","components/grids/WorkProgressGrid.js","components/order-admin/OrderItemProgress.js","components/order-admin/OrderAdmin.js","functions/commonFunctions.js","gql/queries/other.js","gql/queries/locations.js","components/ui-components/image-viewer/ImageViewer.js","components/order-admin/OrderStats.js"],"names":["OrderAdminButtons","props","history","useHistory","routeMatch","useLocation","Box","display","gridTemplateColumns","ml","mr","mb","Button","onClick","push","pathname","state","location","color","disabled","startsWith","startIcon","GET_ORDER_WORKSHEETS","gql","columnDefs","headerName","field","cellStyle","sort","type","valueFormatter","formatDateGrid","formatNumberGridTwoDecimals","params","value","defaultColDef","filter","sortable","resizable","flex","columnTypes","dateColumn","OrderWorksheetsGrid","selectedOrder","useReactiveVar","gridSelectionsVar","useQuery","variables","id","loading","data","gridOptions","pagination","paginationPageSize","domLayout","rowSelection","animateRows","rowData","worksheetWithValues","nodes","onGridReady","api","sizeColumnsToFit","onGridSizeChanged","CircularProgress","style","marginLeft","marginRight","marginTop","reactUi","className","LocationImageData","selectedLocation","GET_IMAGES_FOR_SINGLE_LOCATION","sitelocationId","fetchPolicy","ImageViewer","CREATE_BULK_WORKSHEETS","Item","sx","other","pt","pb","mt","width","OrderItemProgressButtons","justifyContent","process","fullWidth","forwardRef","ref","DateTime","now","toISODate","inputRef","useRef","useState","setValue","lastRowDate","currentPeriod","useEffect","date","weekEndingDate","current","focus","select","useImperativeHandle","getValue","onChange","e","target","toLocaleString","qtyOs","onChangeListener","useCallback","event","Number","alert","onKeyPressListener","numberOnly","nativeEvent","preventDefault","afterGuiAttached","onKeyPress","open","setOpen","handleKeyDown","key","React","document","addEventListener","removeEventListener","displayName","lastRowSupervisor","previousOption","options","obj","supervisor","Select","height","displayEmpty","renderValue","onClose","onOpen","map","item","MenuItem","WorkProgressGrid","supervisors","useMemo","colId","editable","cellEditorFramework","SimpleNumericEditor","SimpleSelectEditor","cellEditorParams","defaults","getRowNode","rowIndex","SimpleDateEditor","split","reverse","join","valueGetter","qtyDone","valueOs","singleClickEdit","onFirstDataRendered","startEditingCell","colKey","OrderItemProgress","batchRef","uuidv4","gridData","setGridData","GET_INCOMPLETE_LOCATION_ITEMS","onCompleted","orderdetailWithValues","GET_ALL_SUPERVISORS","supervisorsLoading","GET_CURRENT_PERIOD","periodLoading","useMutation","refetchQueries","query","GET_SINGLE_LOCATION","awaitRefetchQueries","submitWorksheets","editedItems","apiObject","orderheaderId","unitPayableTotal","supervisorId","periodNumberId","periods","dateComplete","qtyComplete","orderdetailId","batchId","valueComplete","Object","values","findIndex","v","includes","confirmAlert","customUI","submissionValue","formatNumberTwoDecimals","reduce","total","input","worksheets","orderId","then","OrderLocations","lazy","OrderItems","OrderImages","OrderDocuments","OrderAdmin","m","OrderStats","fallback","path","exact","formatNumberGridNoDecimals","number","numeral","format","formatNumberNoDecimals","fromISO","toFormat","formatDate","removeCommon","first","second","el","removedFromInitial","getFirstLetters","str","word","fixKeys","fn","fromEntries","entries","k","Array","isArray","s","replace","c","toUpperCase","toLowerCase","divideIfNotZero","numerator","denominator","isNaN","renameKeys","newKeys","keyValues","keys","newKey","assign","GET_ITEM_TYPES","GET_RATESET_HEADERS","GET_RATESET_PRICES","GET_SUPERVISOR_VALUES_FOR_SINGLE_ORDERHEADER","GET_PERIOD_BASICS","GET_PERIODS_WITH_VALUES","GET_ORDER_LOCATIONS","GET_ORDER_LOCATIONS_WITH_IMAGES","images","imageDetails","original","headerImageFile","thumbnail","originalHeight","description","textAlign","worksheetReference","longName","exifDate","dateTakenManual","length","items","thumbnailPosition","window","currentSrc","lazyLoad","showThumbnails","GET_SINGLE_ORDERHEADER","border","flexGrow","bgcolor","p","borderRadius","flexWrap","fontWeight","orderheaderWithValue","projectTitle","substring","orderNumber","statusDescription","area","orderValueLabour","orderValueMaterials","orderValueOther","orderValueTotal","orderValueTotalComplete","orderValueTotalApplied","orderValueTotalBoq","orderValueTotalVarn","locationCount","locationsComplete","itemCount","itemsComplete","documentCount","imageCount"],"mappings":"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","file":"static/js/24.c2e3a218.chunk.js","sourcesContent":["/** @format */\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Box } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst OrderAdminButtons = (props) => {\n\tconst history = useHistory();\n\tlet routeMatch = useLocation();\n\n\treturn (\n\t\t<Box\n\t\t\tdisplay={'grid'}\n\t\t\tgridTemplateColumns='auto auto auto auto auto auto'\n\t\t\tml={0.5}\n\t\t\tmr={0.5}\n\t\t\tmb={2}>\n\t\t\t<Button\n\t\t\t\t//  disabled={routeMatch.pathname.startsWith('/projects/admin/locations')}\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: '/projects/admin/locations',\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='navigation'>\n\t\t\t\tlocations\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tdisabled={routeMatch.pathname.startsWith('/projects/admin/items')}\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: `/projects/admin/items`,\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='navigation'>\n\t\t\t\titems\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tdisabled={routeMatch.pathname.startsWith('/projects/admin/worksheets')}\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: `/projects/admin/worksheets`,\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='navigation'>\n\t\t\t\tworksheets\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tdisabled={routeMatch.pathname.startsWith('/projects/admin/documents')}\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: `/projects/admin/documents`,\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='navigation'>\n\t\t\t\tdocuments\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tdisabled={routeMatch.pathname.startsWith('/projects/admin/images')}\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: `/projects/admin/images`,\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='navigation'>\n\t\t\t\tview images\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={() =>\n\t\t\t\t\thistory.push({\n\t\t\t\t\t\tpathname: `/projects/admin/images`,\n\t\t\t\t\t\tstate: history.location.state,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcolor='action'\n\t\t\t\tstartIcon={<DownloadIcon />}>\n\t\t\t\tDownload Workbook\n\t\t\t</Button>\n\t\t</Box>\n\t);\n};\n\nexport default OrderAdminButtons;\n","/** @format */\n\nimport React from 'react';\nimport {AgGridReact} from 'ag-grid-react';\nimport {formatDateGrid, formatNumberGridTwoDecimals,} from '../../functions/commonFunctions';\nimport {gql, useQuery, useReactiveVar} from '@apollo/client';\nimport {gridSelectionsVar} from '../../cache';\nimport {CircularProgress} from '@mui/material';\n\nconst GET_ORDER_WORKSHEETS = gql`\n    query GetOrderWorksheets($id: Int!) {\n        worksheetWithValues(filter: { orderheaderId: { equalTo: $id } }) {\n            nodes {\n                activityCode\n                activityDescription\n                applied\n                dateComplete\n                id\n                itemNumber\n                locationReference\n                worksheetReference\n                week\n                year\n                periodNumber\n                qtyComplete\n                supervisorName\n                valueComplete\n                batchId\n                applicationNumber\n            }\n        }\n    }\n`;\n\nconst columnDefs = [\n    {\n        headerName: 'Worksheet Ref',\n        field: 'worksheetReference',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Batch Ref',\n        field: 'batchId',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Location',\n        field: 'locationReference',\n        cellStyle: {'text-align': 'left'},\n        //minWidth: 250,\n    },\n    {\n        headerName: 'Item Number',\n        field: 'itemNumber',\n        cellStyle: {'text-align': 'left'},\n        sort: 'asc',\n    },\n    {\n        headerName: 'Activity Code',\n        field: 'activityCode',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Activity Description',\n        field: 'activityDescription',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Work Done Date',\n        field: 'dateComplete',\n        type: 'dateColumn',\n        valueFormatter: formatDateGrid,\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Year',\n        field: 'year',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Week Number',\n        field: 'week',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Supervisor Name',\n        field: 'supervisorName',\n        cellStyle: {'text-align': 'left'},\n    },\n    {\n        headerName: 'Qty Complete',\n        field: 'qtyComplete',\n        type: 'numericColumn',\n        valueFormatter: formatNumberGridTwoDecimals,\n    },\n    {\n        headerName: 'Value Complete',\n        field: 'valueComplete',\n        type: 'numericColumn',\n        valueFormatter: formatNumberGridTwoDecimals,\n    },\n    {\n        headerName: 'Applied',\n        field: 'applied',\n        type: 'rightAligned',\n        valueFormatter: function (params) {\n            return params.value ? 'Yes' : 'No';\n        },\n    },\n    {\n        headerName: 'App Number',\n        field: 'applicationNumber',\n        type: 'numericColumn',\n    },\n    {\n        headerName: 'Reporting Period',\n        field: 'periodNumber',\n        type: 'numericColumn',\n    },\n];\n\nconst defaultColDef = {\n    filter: true,\n    sortable: true,\n    resizable: true,\n    flex: true,\n};\n\nconst columnTypes = {\n    dateColumn: {\n        filter: 'agDateColumnFilter',\n    },\n};\nconst OrderWorksheetsGrid = () => {\n    const selectedOrder = useReactiveVar(gridSelectionsVar).selectedOrder;\n    const {loading, data} = useQuery(GET_ORDER_WORKSHEETS, {\n        variables: {id: selectedOrder.id},\n    });\n\n    const gridOptions = {\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        columnTypes: columnTypes,\n        pagination: true,\n        paginationPageSize: 30,\n        domLayout: 'autoHeight',\n        rowSelection: 'single',\n        animateRows: true,\n        rowData: data?.worksheetWithValues.nodes,\n        onGridReady: (params) => {\n            params.api.sizeColumnsToFit();\n        },\n        onGridSizeChanged: (params) => params.api.sizeColumnsToFit(),\n    };\n    if (loading) {\n        return <CircularProgress/>;\n    }\n\n    return (\n        <div style={{marginLeft: 5, marginRight: 5, marginTop: 25}}>\n            <AgGridReact\n                gridOptions={gridOptions}\n                reactUi={false}\n                className='ag-theme-custom-react'\n            />\n        </div>\n    );\n};\n\nexport default OrderWorksheetsGrid;\n","/** @format */\r\n\r\nimport { useQuery, useReactiveVar } from '@apollo/client';\r\nimport { CircularProgress } from '@mui/material';\r\nimport React from 'react';\r\nimport { gridSelectionsVar } from '../../cache';\r\nimport { GET_IMAGES_FOR_SINGLE_LOCATION } from '../../gql/queries/locations';\r\nimport ImageViewer from '../ui-components/image-viewer/ImageViewer';\r\n\r\nconst LocationImageData = () => {\r\n\tconst selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation;\r\n\tconst { data, loading } = useQuery(GET_IMAGES_FOR_SINGLE_LOCATION, {\r\n\t\tvariables: { sitelocationId: selectedLocation.id },\r\n\r\n\t\tfetchPolicy: 'cache-and-network',\r\n\t});\r\n\tif (loading) {\r\n\t\treturn <CircularProgress />;\r\n\t}\r\n\treturn <ImageViewer data={data && data} loading={loading} />;\r\n};\r\nexport default LocationImageData;\r\n","import { gql } from '@apollo/client'\n\nexport const CREATE_BULK_WORKSHEETS = gql`\n\tmutation CreateBulkWorksheets(\n\t\t$input: WorksheetCreateBulkWorksheetsInput!\n\t\t$orderId: Int!\n\t) {\n\t\tworksheetCreateBulkWorksheets(input: $input) {\n\t\t\tquery {\n\t\t\t\torderheaderWithValueById(id: $orderId) {\n\t\t\t\t\tarea\n\t\t\t\t\taverageItemValue\n\t\t\t\t\taverageLocationValue\n\t\t\t\t\tid\n\t\t\t\t\titemCount\n\t\t\t\t\titemCountBoq\n\t\t\t\t\titemCountVarn\n\t\t\t\t\titemsComplete\n\t\t\t\t\titemsCompleteBoq\n\t\t\t\t\titemsCompleteVarn\n\t\t\t\t\tlocationCount\n\t\t\t\t\tlocationsComplete\n\t\t\t\t\tstatusDescription\n\t\t\t\t\torderNumber\n\t\t\t\t\torderValueLabour\n\t\t\t\t\torderValueMaterials\n\t\t\t\t\torderValueOther\n\t\t\t\t\torderValueTotal\n\t\t\t\t\torderValueTotalApplied\n\t\t\t\t\torderValueTotalBoq\n\t\t\t\t\torderValueTotalComplete\n\t\t\t\t\torderValueTotalVarn\n\t\t\t\t\tprojectTitle\n\t\t\t\t\tworkType\n\t\t\t\t\tissuedDate\n\t\t\t\t\tdocumentCount\n\t\t\t\t\timageCount\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport {gridSelectionsVar} from '../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport {Button} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add'\n\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                pt: 1,\n                pb: 1,\n                mt: 1,\n                mb: 1,\n                width: 800,\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\nconst OrderItemProgressButtons = (props) => {\n    const selectedLocation = useReactiveVar(gridSelectionsVar).selectedLocation;\n\n    return (\n        <Box sx={{display: 'flex', mb: 2, justifyContent: 'flex-start'}}>\n            <Item>\n                <Button\n                    onClick={() => props.process(selectedLocation)}\n                    color='create'\n                    fullWidth\n                    startIcon={<AddIcon/>}\n                >\n                    save changes\n                </Button>\n\n            </Item>\n            <Item>\n                {/*  <CancelButton\n          label='reset data'\n          onClick={() => props.process(selectedLocation)}\n        /> */}\n            </Item>\n        </Box>\n    );\n};\n\nexport default OrderItemProgressButtons;\n","import {forwardRef, useEffect, useImperativeHandle, useRef, useState} from \"react\";\nimport {DateTime} from \"luxon\";\n\nexport default forwardRef((props, ref) => {\n  DateTime.now().toISODate();\n  const inputRef = useRef();\n  const [value, setValue] = useState('');\n\n  const {lastRowDate, currentPeriod} = props\n\n  useEffect(() => {\n    if (lastRowDate) {\n      setValue(lastRowDate.data.date)\n    }\n    else setValue(currentPeriod.weekEndingDate)\n    inputRef.current.focus();\n    inputRef.current.select();\n  }, [lastRowDate, currentPeriod])\n\n  function inputHandler(e) {\n    setValue(e.target.value.toLocaleString());\n  }\n\n  useImperativeHandle(ref, () => {\n      return {\n        getValue: () => {\n          return value;\n        },\n      }\n    }\n  )\n  ;\n\n  return (\n    <input\n      type=\"date\"\n      className=\"ag-input-field-input ag-text-field-input\"\n      ref={inputRef}\n      onChange={inputHandler}\n      value={value}\n\n    />\n  )\n})","import {forwardRef, useCallback, useImperativeHandle, useRef, useState} from 'react';\nimport {numberOnly} from \"../../../functions/commonFunctions\";\n\nexport default forwardRef((props, ref) => {\n  const inputRef = useRef();\n  const { qtyOs } = props.data\n  const [value, setValue] = useState(qtyOs)\n\n\n  const onChangeListener = useCallback(event => {\n    if (Number(event.target.value) > Number(qtyOs)) {\n      alert('Qty Done Cannot Exceed Qty Outstanding');\n      setValue(value);\n    }\n    else {\n      setValue(event.target.value);\n    }\n  }, [value, qtyOs]);\n\n\n  const onKeyPressListener = useCallback(event => {\n    if (!numberOnly(event.nativeEvent)) {\n      event.preventDefault();\n    }\n  }, []);\n\n\n  useImperativeHandle(ref, () => {\n    return {\n      getValue() {\n        return value;\n      },\n      afterGuiAttached: () => {\n        inputRef.current.focus();\n        inputRef.current.select();\n      }\n    };\n  });\n\n  return (\n    <input\n      className='ag-input-field-input ag-text-field-input'\n      ref={inputRef}\n      onChange={onChangeListener}\n      value={value}\n      onKeyPress={onKeyPressListener}\n    />\n  );\n});\n","import React, {forwardRef, useImperativeHandle, useRef, useState,} from 'react';\nimport {MenuItem, Select} from '@mui/material';\n\n\nexport default forwardRef((props, ref) => {\n    const [value, setValue] = useState('');\n    const [open, setOpen] = useState(false);\n    const inputRef = useRef();\n\n    React.useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    });\n\n    function handleKeyDown(e) {\n        e.key === \"ArrowDown\" && setOpen(true);\n    }\n\n    function onChangeHandler(e, value) {\n        setValue(e.target.value);\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n        // setValue()\n    };\n\n\n    useImperativeHandle(ref, () => {\n\n        return {\n            getValue: () => {\n                return value.displayName;\n            },\n\n            afterGuiAttached: () => {\n                //  setOpen(true);\n                if (props.lastRowSupervisor) {\n                    const previousOption = props.options.filter(obj => obj.displayName === props.lastRowSupervisor.data.supervisor)[0]\n                    setValue(previousOption)\n                } else setValue(props.options[0])\n            },\n        };\n    });\n\n    return (\n        <Select\n            value={value}\n            onChange={onChangeHandler}\n            ref={inputRef}\n            fullWidth\n            open={open}\n            style={{height: 30}}\n            displayEmpty={true}\n            renderValue={() => value.displayName}\n            onClose={handleClose}\n            onOpen={handleOpen}>\n            {props.options.map((item) => (\n                <MenuItem key={item.id} value={item}>\n                    {item.displayName}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n});\n","import React from 'react';\nimport {AgGridReact} from 'ag-grid-react';\nimport {formatNumberGridTwoDecimals} from '../../functions/commonFunctions';\nimport SimpleDateEditor from './cell-renderers/SimpleDateEditor';\nimport SimpleNumericEditor from \"./cell-renderers/SimpleNumericEditor\";\nimport SimpleSelectEditor from './cell-renderers/SimpleSelectEditor'\n\n\nconst WorkProgressGrid = ({data, supervisors, currentPeriod}) => {\n    /** @namespace params.data.valueOs **/\n    /** @namespace params.data.qtyOs **/\n\n\n    const columnDefs = React.useMemo(() => [\n        {headerName: 'Item Ref', field: 'itemNumber'},\n        {headerName: 'Item Type', field: 'typeShort'},\n        {\n            headerName: 'Activity Code',\n            field: 'activityCode',\n        },\n        {\n            headerName: 'Activity Description',\n            field: 'activityDescription',\n        },\n        {\n            headerName: 'Qty Ordered',\n            field: 'qtyOrdered',\n            type: 'numericColumn',\n            valueFormatter: formatNumberGridTwoDecimals,\n        },\n        {\n            headerName: 'Qty Os',\n            field: 'qtyOs',\n            valueFormatter: formatNumberGridTwoDecimals,\n            type: 'numericColumn',\n        },\n        {\n            headerName: 'Value Os',\n            field: 'valueOs',\n            valueFormatter: formatNumberGridTwoDecimals,\n            type: 'numericColumn',\n        },\n        {\n            headerName: 'Qty Done',\n            colId: 'qtyDone',\n            field: 'qtyDone',\n            type: 'numericColumn',\n            editable: true,\n            cellEditorFramework: SimpleNumericEditor,\n            valueFormatter: formatNumberGridTwoDecimals,\n        },\n        {\n            headerName: 'Supervisor',\n            colId: 'supervisor',\n            field: 'supervisor',\n            editable: true,\n            cellEditorFramework: SimpleSelectEditor,\n            width: 150,\n            cellEditorParams: (params) => ({\n                options: supervisors,\n                defaults: data,\n                lastRowSupervisor: params.api.getRowNode(params.rowIndex - 1),\n            }),\n        },\n        {\n            headerName: 'Date Complete',\n            field: 'date',\n            editable: true,\n            cellEditorFramework: SimpleDateEditor,\n            cellEditorParams: (params) => ({\n                lastRowDate: params.api.getRowNode(params.rowIndex - 1),\n                currentPeriod: currentPeriod,\n            }),\n            valueFormatter: (params) =>\n                params.value && params.value.split('-').reverse().join('/')\n        },\n        {\n            headerName: 'Value Complete',\n            valueGetter: (params) => (params.data.qtyDone) * (params.data.valueOs) / (params.data.qtyOs),\n            valueFormatter: formatNumberGridTwoDecimals,\n            type: 'numericColumn',\n        },\n    ], [currentPeriod, data, supervisors])\n\n    const defaultColDef = {\n        filter: false,\n        sortable: false,\n        resizable: true,\n    };\n\n    const gridOptions = {\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        pagination: false,\n        singleClickEdit: true,\n    };\n\n    const onDataRendered = (params) => {\n        params.api.startEditingCell({\n            rowIndex: 0,\n            colKey: 'qtyDone',\n        });\n        params.api.sizeColumnsToFit();\n    };\n\n    return (\n        <>\n            <div className='ag-theme-custom-react' style={{height: 850}}>\n                <AgGridReact\n                    gridOptions={gridOptions}\n                    rowData={data}\n                    onFirstDataRendered={onDataRendered}\n                    onGridSizeChanged={(params) => params.api.sizeColumnsToFit()}\n                    reactUi={false}\n                    //  getRowNodeId={data => data.id}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default WorkProgressGrid;\n","/** @format */\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { useHistory } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport { gridSelectionsVar } from '../../cache';\nimport { formatNumberTwoDecimals } from '../../functions/commonFunctions';\nimport { CREATE_BULK_WORKSHEETS } from '../../gql/mutations/worksheets';\nimport {\n\tGET_INCOMPLETE_LOCATION_ITEMS,\n\tGET_SINGLE_LOCATION,\n} from '../../gql/queries/locations';\nimport {\n\tGET_ALL_SUPERVISORS,\n\tGET_CURRENT_PERIOD,\n} from '../../gql/queries/other';\nimport OrderItemProgressButtons from '../button-bars/OrderItemProgressButtons';\nimport WorkProgressGrid from '../grids/WorkProgressGrid';\n\nconst OrderItemProgress = () => {\n\t/** @namespace data.orderdetailWithValues **/\n\t/** @namespace currentPeriod.periods **/\n\n\tconst history = useHistory();\n\n\tconst batchRef = React.useRef(uuidv4());\n\n\tconst selectedLocation = gridSelectionsVar().selectedLocation;\n\tconst selectedOrder = gridSelectionsVar().selectedOrder;\n\n\tconst [gridData, setGridData] = React.useState([]);\n\n\tconst { loading } = useQuery(GET_INCOMPLETE_LOCATION_ITEMS, {\n\t\tvariables: { id: Number(selectedLocation.id) },\n\n\t\tonCompleted: (data) =>\n\t\t\tsetGridData(\n\t\t\t\tdata.orderdetailWithValues.nodes.map((item) => ({\n\t\t\t\t\t...item,\n\t\t\t\t\tqtyDone: 0.0,\n\t\t\t\t})),\n\t\t\t),\n\t});\n\n\tconst { data: supervisors, loading: supervisorsLoading } =\n\t\tuseQuery(GET_ALL_SUPERVISORS);\n\n\tconst { data: currentPeriod, loading: periodLoading } = useQuery(\n\t\tGET_CURRENT_PERIOD,\n\t\t{\n\t\t\tfetchPolicy: 'cache-and-network',\n\t\t},\n\t);\n\n\tconst [submitWorksheets] = useMutation(CREATE_BULK_WORKSHEETS, {\n\t\trefetchQueries: [\n\t\t\t{\n\t\t\t\tquery: GET_SINGLE_LOCATION,\n\t\t\t\tvariables: { id: selectedLocation.id },\n\t\t\t},\n\t\t],\n\t\tawaitRefetchQueries: true,\n\t\tonCompleted: () => {\n\t\t\thistory.push({\n\t\t\t\tpathname: `/projects/admin/locations`,\n\t\t\t\tstate: selectedOrder.id,\n\t\t\t});\n\t\t},\n\t});\n\n\tconst processData = () => {\n\t\tconst editedItems = gridData.filter((obj) => obj.qtyDone > 0);\n\t\tconst apiObject = editedItems.map(\n\t\t\t({\n\t\t\t\tdate,\n\t\t\t\tid,\n\t\t\t\tqtyDone,\n\t\t\t\tsupervisor,\n\t\t\t\tsitelocationId,\n\t\t\t\torderheaderId,\n\t\t\t\tunitPayableTotal,\n\t\t\t}) => ({\n\t\t\t\tsupervisorId: supervisors.supervisors.nodes\n\t\t\t\t\t.filter((obj) => obj.displayName === supervisor)\n\t\t\t\t\t.map((item) => item.id)[0],\n\t\t\t\tperiodNumberId: currentPeriod.periods.nodes[0].id,\n\t\t\t\tdateComplete: date,\n\t\t\t\tqtyComplete: qtyDone,\n\t\t\t\torderdetailId: id,\n\t\t\t\tbatchId: batchRef.current,\n\t\t\t\torderheaderId,\n\t\t\t\tsitelocationId,\n\t\t\t\tvalueComplete: qtyDone * Number(unitPayableTotal),\n\t\t\t}),\n\t\t);\n\t\tconst errorCheck = apiObject\n\t\t\t.map(\n\t\t\t\t(item) =>\n\t\t\t\t\t-1 !== Object.values(item).findIndex((v) => v == null || v === ''),\n\t\t\t)\n\t\t\t.includes(true);\n\t\tif (errorCheck) {\n\t\t\tconfirmAlert({\n\t\t\t\tcustomUI: ({ onClose }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className='custom-ui'>\n\t\t\t\t\t\t\t<h1>Submission Contains Errors!</h1>\n\t\t\t\t\t\t\t<p>Please Correct Them And Try Again</p>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tconst submissionValue = formatNumberTwoDecimals(\n\t\t\t\teditedItems\n\t\t\t\t\t.map((item) => (item.valueOs / item.qtyOs) * item.qtyDone)\n\t\t\t\t\t.reduce((item, total) => item + total, 0),\n\t\t\t);\n\t\t\tconfirmAlert({\n\t\t\t\tcustomUI: ({ onClose }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className='custom-ui'>\n\t\t\t\t\t\t\t<h1>Confirm Submission</h1>\n\t\t\t\t\t\t\t<p>{`Submission Value Is: ${submissionValue}`}</p>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tsubmitWorksheets({\n\t\t\t\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\t\t\t\tinput: { worksheets: apiObject },\n\t\t\t\t\t\t\t\t\t\t\torderId: selectedOrder.id,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}).then(() => onClose())\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\tSUBMIT\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\tCANCEL\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\tif (loading || supervisorsLoading || periodLoading)\n\t\treturn <CircularProgress />;\n\n\treturn (\n\t\t<div>\n\t\t\t<OrderItemProgressButtons process={processData} />\n\t\t\t<WorkProgressGrid\n\t\t\t\tdata={gridData}\n\t\t\t\tsupervisors={supervisors.supervisors.nodes}\n\t\t\t\tcurrentPeriod={currentPeriod.periods.nodes[0]}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default OrderItemProgress;\n","/** @format */\n\nimport { Box, CircularProgress } from '@mui/material';\nimport React, { lazy, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport OrderAdminButtons from '../button-bars/OrderAdminButtons';\nimport OrderWorksheetsGrid from '../grids/OrderWorksheetsGrid';\nimport LocationImageData from './LocationImages';\nimport OrderItemProgress from './OrderItemProgress';\nimport OrderStats from './OrderStats';\n\nconst OrderLocations = lazy(() => import('./OrderLocations'));\nconst OrderItems = lazy(() => import('./OrderItems'));\nconst OrderImages = lazy(() => import('./OrderImages'));\nconst OrderDocuments = lazy(() => import('./OrderDocuments'));\n\nconst OrderAdmin = () => {\n\treturn (\n\t\t<Box m={2}>\n\t\t\t<br />\n\t\t\t<OrderAdminButtons />\n\t\t\t<OrderStats />\n\t\t\t<hr />\n\t\t\t<Suspense fallback={<CircularProgress />}>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/projects/admin/locations' exact>\n\t\t\t\t\t\t<OrderLocations />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/progress/' exact>\n\t\t\t\t\t\t<OrderItemProgress />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/items' exact>\n\t\t\t\t\t\t<OrderItems />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/images' exact>\n\t\t\t\t\t\t<OrderImages />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/documents' exact>\n\t\t\t\t\t\t<OrderDocuments />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/worksheets' exact>\n\t\t\t\t\t\t<OrderWorksheetsGrid />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path='/projects/admin/locations/images' exact>\n\t\t\t\t\t\t<LocationImageData />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Suspense>\n\t\t</Box>\n\t);\n};\nexport default OrderAdmin;\n","/** @format */\n\nimport {DateTime} from 'luxon';\nimport numeral from 'numeral';\n\nexport const formatNumberGridNoDecimals = (number) =>\n    numeral(number.value).format('0,0');\nexport const formatNumberGridTwoDecimals = (number) =>\n    numeral(number.value).format('0,0.00');\n\nexport const formatNumberNoDecimals = (number) => numeral(number).format('0,0');\nexport const formatNumberTwoDecimals = (number) =>\n    numeral(number).format('0,0.00');\n\nexport const formatDateGrid = (date) =>\n    DateTime.fromISO(date.value).toFormat('dd/LL/y');\nexport const formatDate = (date) => DateTime.fromISO(date).toFormat('dd/LL/y');\nexport const formatExifDate = (date) =>\n    DateTime.fromFormat(date.slice(0, 10).replace(/:/g, '/'), 'y/LL/dd').toFormat(\n        'dd/LL/y',\n    );\n\nexport const formatDateGridText = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\nexport const formatDateText = (date) => DateTime(date).toFormat('dd/LL/y');\n\nexport const convertDateToLocal = date => DateTime.fromISO(date.slice(0, 10)).toFormat('dd/LL/y')\n\n\nexport const parseDateGrid = (date) =>\n    DateTime.fromISO(date.value).toLocaleString();\n\nexport const removeCommon = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return !first.includes(el) && second.includes(el);\n    });\n};\n\nexport const removedFromInitial = (first, second) => {\n    const spread = [...first, ...second];\n    return spread.filter((el) => {\n        return first.includes(el) && !second.includes(el);\n    });\n};\n\nexport const numberOnly = (event) => {\n    return (\n        event.key === '1' ||\n        event.key === '2' ||\n        event.key === '3' ||\n        event.key === '4' ||\n        event.key === '5' ||\n        event.key === '6' ||\n        event.key === '7' ||\n        event.key === '8' ||\n        event.key === '9' ||\n        event.key === '0' ||\n        event.key === '.'\n    );\n};\n\nexport const setDelay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nexport const textTruncate = (str, length, ending) => {\n    if (length == null) {\n        length = 100;\n    }\n    if (ending == null) {\n        ending = '...';\n    }\n    if (str.length > length) {\n        return str.substring(0, length - ending.length) + ending;\n    } else {\n        return str;\n    }\n};\n\nexport const getFirstLetters = (str) => {\n    return str\n        .split(' ')\n        .map((word) => word[0])\n        .join('');\n};\n\nexport const fixKeys = (fn) => (obj) =>\n    Object.fromEntries(\n        Object.entries(obj).map(([k, v]) => [\n            fn(k),\n            Array.isArray(v)\n                ? v.map(fixKeys(fn))\n                : typeof v == 'object'\n                    ? fixKeys(fn)(v)\n                    : v,\n        ]),\n    );\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nexport const camelCase = (s) => s.replace(/_(.)/g, (s, c) => c.toUpperCase());\n\nexport const snakeCase = (s) => s.replace(/_(.)/g, (s, c) => c.toLowerCase());\n\nexport const camelizeKeys = fixKeys(camelCase);\n\nexport const SnakeCaseToWords = fixKeys(snakeCase)\n\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n\n/**\n * \"Safer\" String.toUpperCase()\n */\nexport function upperCase(str) {\n    return str.toUpperCase();\n}\n\n\nexport function properCase(str) {\n    return str.split(' ').map((word) => {\n        return word[0].toUpperCase() + word.substring(1);\n    }).join(\" \");\n}\n\n//const words = mySentence.split(\" \");\n\n//words.map((word) => {\n//\treturn word[0].toUpperCase() + word.substring(1);\n//}).join(\" \");\n\nexport const formatNumberForExcel = (num) => {\n    const m = Number((Math.abs(num) * 100).toPrecision(15));\n    return Math.round(m) / 100 * Math.sign(num);\n}\n\nexport function divideIfNotZero(numerator, denominator) {\n    if (denominator === 0 || isNaN(denominator)) {\n        return null;\n    } else {\n        return numerator / denominator;\n    }\n}\n\nexport function renameKeys(obj, newKeys) {\n    const keyValues = Object.keys(obj).map(key => {\n        const newKey = newKeys[key] || key;\n        return {[newKey]: obj[key]};\n    });\n    return Object.assign({}, ...keyValues);\n}","/** @format */\n\nimport {gql} from '@apollo/client';\n\nexport const GET_ALL_SUPERVISORS = gql`\n    query GetAllSupervisors {\n        supervisors {\n            nodes {\n                displayName\n                id\n            }\n        }\n    }\n`;\n\nexport const GET_CURRENT_PERIOD = gql`\n    query GetCurrentPeriod {\n        periods(condition: { current: true }) {\n            nodes {\n                current\n                id\n                periodNumber\n                week\n                weekCommencingDate\n                weekEndingDate\n                year\n            }\n        }\n    }\n`;\n\nexport const GET_ALL_AREAS = gql`\n    query getAreas {\n        areas {\n            nodes {\n                id\n                description\n            }\n        }\n    }\n`;\n\nexport const GET_ALL_WORKTYPES = gql`\n    query getWorktypes {\n        worktypes {\n            nodes {\n                id\n                description\n            }\n        }\n    }\n`;\n\nexport const GET_ALL_ORDERHEADER_STATUSES = gql`\n    query getOrderheaderStatus {\n        orderheaderStatuses {\n            nodes {\n                id\n                statusDescription\n            }\n        }\n    }\n`;\n\nexport const GET_ORDER_LOCATIONS = gql`\n    query GetOrderLocations($id: Int!) {\n        sitelocationWithValues(filter: { orderheaderId: { equalTo: $id } }) {\n            nodes {\n                complete\n                id\n                itemCount\n                itemsComplete\n                orderValue\n                orderheaderId\n                reference\n                valueApplied\n                valueComplete\n                worksheetReference\n                imageCount\n            }\n            totalCount\n        }\n    }\n`;\n\nexport const GET_ITEM_TYPES = gql`\n    query GetItemTypes {\n        itemTypes {\n            nodes {\n                id\n                typeLong\n                typeShort\n            }\n        }\n    }\n`;\n\nexport const GET_RATESET_HEADERS = gql`\n    query GetRatesetHeaders {\n        ratesetHeaders {\n            nodes {\n                id\n                description\n            }\n        }\n    }\n`;\nexport const GET_RATESET_PRICES = gql`\n    query GetRatesetPrices($id: Int!) {\n        pricesWithUplifts(\n            condition: { ratesetHeaderId: $id }\n            orderBy: ACTIVITY_CODE_ASC\n        ) {\n            nodes {\n                activityCode\n                activityDescription\n                id\n                ratesetHeaderId\n            }\n            totalCount\n        }\n    }\n`;\n\nexport const GET_SUPERVISOR_VALUES_FOR_SINGLE_ORDERHEADER = gql`\n    query GetSupervisorValuesForSingleOrderheader($id: Int!) {\n        orderheader(id: $id) {\n            supervisorsByWorksheetOrderheaderIdAndSupervisorId {\n                nodes {\n                    displayName\n                    fullName\n                    worksheets(condition: { orderheaderId: $id }) {\n                        groupedAggregates(groupBy: SUPERVISOR_ID) {\n                            sum {\n                                valueComplete\n                            }\n                        }\n                    }\n                }\n            }\n            projectTitle\n        }\n    }\n`;\n\nexport const GET_PERIOD_BASICS = gql`\n    query GetPeriodBasics {\n        periodWithValues(filter: { worksValueCurrent: { greaterThan: \"0\" } }) {\n            nodes {\n                id\n                periodNumber\n            }\n        }\n    }\n`;\n\nexport const GET_PERIODS_WITH_VALUES = gql`\n    query GetPeriodsWithValues($id: Int!) {\n        period(id: $id) {\n            periodValuesByAreas {\n                nodes {\n                    areaDescription\n                    areaId\n                    periodId\n                    periodNumber\n                    thisPeriodValue\n                    itemCount\n                    locationCount\n                    orderCount\n                    cumulativeValue\n                    prevCumulativeValue\n                }\n            }\n            worksValue\n            periodValuesByOrderheaders(orderBy: AREA_ID_ASC) {\n                nodes {\n                    areaDescription\n                    areaId\n                    orderId\n                    orderNumber\n                    projectTitle\n                    periodNumber\n                    periodId\n                    valueComplete\n                    worktypeDescription\n                    worktypeId\n                    orderCount\n                    itemCount\n                    locationCount\n                }\n            }\n            periodValuesBySupervisors(orderBy: VALUE_COMPLETE_DESC) {\n                nodes {\n                    periodId\n                    periodNumber\n                    supervisorId\n                    supervisorName\n                    displayName\n                    valueComplete\n                    itemCount\n                    locationCount\n                    orderCount\n                }\n            }\n            periodValuesByActivities {\n                nodes {\n                    activityCode\n                    activityDescription\n                    periodId\n                    periodNumber\n                    valueComplete\n                }\n            }\n            periodWithValueById {\n                closed\n                current\n                id\n                periodNumber\n                week\n                weekCommencingDate\n                weekEndingDate\n                worksValueClosed\n                worksValueCurrent\n                year\n                orderCount\n                itemCount\n                locationCount\n                areaCount\n            }\n        }\n    }\n`;","/** @format */\n\nimport { gql } from '@apollo/client';\n\nexport const GET_INCOMPLETE_LOCATION_ITEMS = gql`\n\tquery GetIncompleteLocationItems($id: Int!) {\n\t\torderdetailWithValues(\n\t\t\tfilter: { complete: { equalTo: false }, sitelocationId: { equalTo: $id } }\n\t\t) {\n\t\t\tnodes {\n\t\t\t\tactivityCode\n\t\t\t\tactivityDescription\n\t\t\t\titemNumber\n\t\t\t\ttypeShort\n\t\t\t\tvalueOs\n\t\t\t\tqtyOs\n\t\t\t\tqtyOrdered\n\t\t\t\tid\n\t\t\t\torderheaderId\n\t\t\t\tunitPayableTotal\n\t\t\t\tsitelocationId\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const GET_SINGLE_LOCATION = gql`\n\tquery GetSingleLocation($id: Int!) {\n\t\tsitelocationWithValueById(id: $id) {\n\t\t\tcomplete\n\t\t\tid\n\t\t\titemCount\n\t\t\titemsComplete\n\t\t\torderValue\n\t\t\torderheaderId\n\t\t\treference\n\t\t\tvalueApplied\n\t\t\tvalueComplete\n\t\t\tworksheetReference\n\t\t\timageCount\n\t\t}\n\t}\n`;\n\nexport const GET_ORDER_LOCATIONS = gql`\n\tquery GetOrderLocations($id: Int!) {\n\t\tsitelocationWithValues(filter: { orderheaderId: { equalTo: $id } }) {\n\t\t\tnodes {\n\t\t\t\tcomplete\n\t\t\t\tid\n\t\t\t\titemCount\n\t\t\t\titemsComplete\n\t\t\t\torderValue\n\t\t\t\torderheaderId\n\t\t\t\treference\n\t\t\t\tvalueApplied\n\t\t\t\tvalueComplete\n\t\t\t\tworksheetReference\n\t\t\t\timageCount\n\t\t\t}\n\t\t\ttotalCount\n\t\t}\n\t}\n`;\n\nexport const GET_ORDER_LOCATIONS_WITH_IMAGES = gql`\n\tquery GetOrderLocationsWithImages($id: Int!) {\n\t\tsitelocationWithValues(\n\t\t\tcondition: { orderheaderId: $id }\n\t\t\tfilter: { imageCount: { greaterThan: \"0\" } }\n\t\t) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\timageCount\n\t\t\t\treference\n\t\t\t\tworksheetReference\n\t\t\t\torderValue\n\t\t\t\tvalueComplete\n\t\t\t\tvalueApplied\n\t\t\t\tsitelocationById {\n\t\t\t\t\timageDetails {\n\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\tsitelocationId\n\t\t\t\t\t\t\tdateTakenManual\n\t\t\t\t\t\t\texifDate\n\t\t\t\t\t\t\texifGps\n\t\t\t\t\t\t\theaderImageFile\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tlongName\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgroupedAggregates(groupBy: SHORT_NAME) {\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t\tdistinctCount {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const GET_IMAGES_FOR_SINGLE_LOCATION = gql`\n\tquery GetLocationImages($sitelocationId: Int!) {\n\t\timageDetails(filter: { sitelocationId: { equalTo: $sitelocationId } }) {\n\t\t\tnodes {\n\t\t\t\tdateTakenManual\n\t\t\t\texifDate\n\t\t\t\theaderImageFile\n\t\t\t\tid\n\t\t\t\tlongName\n\t\t\t\tshortName\n\t\t\t\tsitelocationId\n\t\t\t\tworksheetReference\n\t\t\t}\n\t\t}\n\t}\n`;\n","/** @format */\nimport ImageGallery from 'react-image-gallery';\nimport { formatDate } from '../../../functions/commonFunctions';\n\nconst ImageViewer = (props) => {\n\tconst images = props.data?.imageDetails?.nodes.map((item) => ({\n\t\toriginal: `/images/resized/${item.headerImageFile.id}`,\n\t\tthumbnail: `/images/thumbnails/${item.headerImageFile.id}`,\n\t\toriginalHeight: props.height ? props.height : 800,\n\t\tdescription: (\n\t\t\t<div style={{ textAlign: 'left' }}>\n\t\t\t\t<p>WORKSHEET: {item.worksheetReference}</p>\n\t\t\t\t<p>{item.longName}</p>\n\t\t\t\t<p>\n\t\t\t\t\t{item.exifDate\n\t\t\t\t\t\t? formatDate(item.exifDate)\n\t\t\t\t\t\t: formatDate(item.dateTakenManual)}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t),\n\t}));\n\n\tconst handleImageClick = (event) =>\n\t\twindow.open(\n\t\t\tevent.target.currentSrc.replace('resized', 'original'),\n\t\t\t'_blank',\n\t\t);\n\n\treturn (\n\t\t<div style={{ marginTop: '50px' }}>\n\t\t\t{images.length > 0 ? (\n\t\t\t\t<ImageGallery\n\t\t\t\t\titems={images}\n\t\t\t\t\tthumbnailPosition='bottom'\n\t\t\t\t\tonClick={handleImageClick}\n\t\t\t\t\tlazyLoad={true}\n\t\t\t\t\tshowThumbnails={true}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<div className='no-data-message'>NO IMAGES ARE AVAILABLE</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ImageViewer;\n","/** @format */\n\nimport React from 'react';\nimport {gql, useQuery, useReactiveVar} from '@apollo/client';\nimport {gridSelectionsVar} from '../../cache';\nimport {Box, CircularProgress, Typography} from '@mui/material';\nimport {formatNumberNoDecimals} from '../../functions/commonFunctions';\n\nexport const GET_SINGLE_ORDERHEADER = gql`\n    query GetSingleOrderheader($id: Int!) {\n        orderheaderWithValue(id: $id) {\n            area\n            averageItemValue\n            averageLocationValue\n            id\n            itemCount\n            itemCountBoq\n            itemCountVarn\n            itemsComplete\n            itemsCompleteBoq\n            itemsCompleteVarn\n            locationCount\n            locationsComplete\n            statusDescription\n            orderNumber\n            orderValueLabour\n            orderValueMaterials\n            orderValueOther\n            orderValueTotal\n            orderValueTotalApplied\n            orderValueTotalBoq\n            orderValueTotalComplete\n            orderValueTotalVarn\n            projectTitle\n            workType\n            issuedDate\n            documentCount\n            imageCount\n        }\n    }\n`;\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            border={1}\n            flexGrow={1}\n            bgcolor={'#b4cce4'}\n            m={0.5}\n            p={0.5}\n            textAlign={'center'}\n            borderRadius={3}\n            {...other}\n        />\n    );\n}\n\nconst OrderStats = () => {\n    const selectedOrder = useReactiveVar(gridSelectionsVar).selectedOrder;\n\n    const {data, loading} = useQuery(GET_SINGLE_ORDERHEADER, {\n        variables: {id: selectedOrder.id},\n    });\n\n    if (loading) {\n        return <CircularProgress/>;\n    }\n\n    return (\n        <Box\n            display={'flex'}\n            flexWrap={\"wrap\"}\n            justifyContent={'space-between'}\n            ml={0.5}\n            mr={0.5}\n        >\n            <Item>\n                <Typography fontWeight={'bold'}>PROJECT</Typography>\n                <Typography>\n                    {data.orderheaderWithValue.projectTitle.substring(0, 25) + '...'}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>ORDER NO</Typography>\n                <Typography>{data.orderheaderWithValue.orderNumber}</Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>STATUS</Typography>\n                <Typography>{data.orderheaderWithValue.statusDescription} </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>AREA</Typography>\n                <Typography>{data.orderheaderWithValue.area}</Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>LABOUR</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.orderValueLabour)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>MATERIALS</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueMaterials,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>OTHER</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.orderValueOther)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>TOTAL</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.orderValueTotal)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>COMPLETE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueTotalComplete,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>TO DO</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueTotal -\n                        data.orderheaderWithValue.orderValueTotalComplete,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>APPLIED</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueTotalApplied,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>TO APPLY</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueTotalComplete -\n                        data.orderheaderWithValue.orderValueTotalApplied,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography>BOQ VAL</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.orderValueTotalBoq)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>VARN VAL</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(\n                        data.orderheaderWithValue.orderValueTotalVarn,\n                    )}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>LOCATIONS</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.locationCount)}\n                </Typography>\n            </Item>\n\n            <Item>\n                <Typography fontWeight={'bold'}>COMPLETE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.locationsComplete)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>ITEMS</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.itemCount)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>COMPLETE</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.itemsComplete)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>DOCS</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.documentCount)}\n                </Typography>\n            </Item>\n            <Item>\n                <Typography fontWeight={'bold'}>IMAGES</Typography>\n                <Typography>\n                    {formatNumberNoDecimals(data.orderheaderWithValue.imageCount)}\n                </Typography>\n            </Item>\n        </Box>\n    );\n};\n\nexport default OrderStats;\n"],"sourceRoot":""}