{"version":3,"sources":["../../../src/errors.js","../../../src/impl/formats.js","../../../src/impl/util.js","../../../src/impl/english.js","../../../src/impl/formatter.js","../../../src/impl/invalid.js","../../../src/zone.js","../../../src/zones/systemZone.js","../../../src/zones/IANAZone.js","../../../src/zones/fixedOffsetZone.js","../../../src/zones/invalidZone.js","../../../src/impl/zoneUtil.js","../../../src/settings.js","../../../src/impl/locale.js","../../../src/impl/regexParser.js","../../../src/duration.js","../../../src/interval.js","../../../src/info.js","../../../src/impl/diff.js","../../../src/impl/digits.js","../../../src/impl/tokenParser.js","../../../src/impl/conversions.js","../../../src/datetime.js","../../../src/luxon.js","../node_modules/numeral/numeral.js","../../../../src/react/hooks/useApolloClient.ts","../../../../src/react/parser/index.ts","../../../../src/react/hooks/useQuery.ts","../node_modules/use-sync-external-store/shim/index.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js"],"names":["LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","InvalidArgumentError","ZoneIsAbstractError","n","s","l","DATE_SHORT","year","month","day","DATE_MED","DATE_MED_WITH_WEEKDAY","weekday","DATE_FULL","DATE_HUGE","TIME_SIMPLE","hour","minute","TIME_WITH_SECONDS","second","TIME_WITH_SHORT_OFFSET","timeZoneName","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","hourCycle","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_MED_WITH_WEEKDAY","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","isUndefined","o","isNumber","isInteger","hasRelative","Intl","e","bestBy","arr","by","compare","pair","best","hasOwnProperty","obj","prop","Object","integerBetween","thing","bottom","top","padStart","input","padded","parseInteger","string","parseInt","parseFloating","parseFloat","parseMillis","fraction","f","Math","roundTo","number","digits","towardZero","factor","rounder","isLeapYear","daysInYear","daysInMonth","modMonth","x","floorMod","objToLocalTS","d","Date","weeksInWeekYear","weekYear","p1","last","p2","untruncateYear","parseZoneInfo","ts","offsetFormat","locale","timeZone","date","intlOpts","modified","parsed","m","signedOffset","offHourStr","offMinuteStr","offHour","Number","offMin","asNumber","value","numericValue","normalizeObject","normalizer","normalized","v","formatOffset","offset","format","hours","minutes","sign","RangeError","timeObject","keys","a","pick","monthsLong","monthsShort","monthsNarrow","months","length","weekdaysLong","weekdaysShort","weekdaysNarrow","weekdays","meridiems","erasLong","erasShort","erasNarrow","eras","stringifyTokens","splits","tokenToString","token","macroTokenToFormatOpts","D","DD","DDD","DDDD","t","tt","ttt","tttt","T","TT","TTT","TTTT","ff","fff","ffff","F","FF","FFF","FFFF","Formats","Formatter","this","opts","formatOpts","loc","systemLoc","create","parseFormat","current","currentFull","bracketed","i","fmt","c","literal","val","formatWithSystemDefault","dtFormatter","dt","formatDateTime","formatDateTimeParts","resolvedOptions","num","p","numberFormatter","formatDateTimeFromString","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","extract","meridiem","English","standalone","era","allowZ","maybeMacro","formatDurationFromString","lildur","tokenToField","tokens","realTokens","found","collapsed","dur","mapped","Invalid","explanation","toMessage","Zone","offsetName","equals","singleton","SystemZone","otherZone","dtfCache","typeToPos","ianaZoneCache","IANAZone","resetCache","isValidSpecifier","isValidZone","zone","isNaN","NaN","dtf","hour12","formatted","filled","type","pos","partsOffset","exec","fMonth","fDay","hackyOffset","adOrBc","asTS","over","millisecond","FixedOffsetZone","instance","parseSpecifier","r","fixed","InvalidZone","normalizeZone","defaultZone","lowered","now","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","Settings","resetCaches","Locale","throwOnInvalid","intlLFCache","intlDTCache","getCachedDTF","locString","key","JSON","intlNumCache","intlRelCache","sysLocaleCache","listStuff","defaultOK","englishFn","intlFn","mode","PolyNumberFormatter","padTo","floor","otherOpts","forceSimple","useGrouping","inf","getCachedINF","intl","PolyDateFormatter","gmtOffset","offsetZ","z","DateTime","formatToParts","PolyRelFormatter","style","isEnglish","rtf","cacheKeyOpts","getCachedRTF","count","unit","numeric","narrow","units","years","quarters","weeks","days","seconds","lastable","indexOf","isDay","isInPast","fmtValue","singular","lilUnits","fmtUnit","localeStr","uIndex","smaller","options","parseLocaleString","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","numberingSystem","numbering","intlConfigString","weekdaysCache","monthsCache","meridiemCache","eraCache","specifiedLocale","fastNumbersCached","fromOpts","defaultToEN","fromObject","isActuallyEn","hasNoWeirdness","clone","alts","redefaultToEN","redefaultToSystem","formatStr","ms","mapMonths","mapWeekdays","matching","relFormatter","listFormatter","getCachedLF","toLowerCase","other","combineRegexes","regexes","full","RegExp","combineExtractors","extractors","mergedVals","mergedZone","cursor","ex","next","parse","patterns","regex","extractor","simpleParse","ret","match","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","extractISOWeekData","extractISOOrdinalData","sqlTimeRegex","sqlTimeExtensionRegex","int","fallback","extractISOYmd","extractISOTime","milliseconds","extractISOOffset","local","fullOffset","extractIANAZone","isoTimeOnly","isoDuration","extractISODuration","yearStr","monthStr","weekStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","hasNegativePrefix","negativeSeconds","maybeNegate","force","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","result","rfc2822","extractRFC2822","obsOffset","milOffset","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","isoYmdWithTimeExtensionRegex","isoWeekWithTimeExtensionRegex","isoOrdinalWithTimeExtensionRegex","isoTimeCombinedRegex","extractISOYmdTimeAndOffset","extractISOWeekTimeAndOffset","extractISOOrdinalDateAndTime","extractISOTimeAndOffset","extractISOTimeOnly","sqlYmdWithTimeExtensionRegex","sqlTimeCombinedRegex","extractISOYmdTimeOffsetAndIANAZone","extractISOTimeOffsetAndIANAZone","lowOrderMatrix","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","reverseUnits","clear","conf","values","conversionAccuracy","Duration","convert","matrix","fromMap","fromUnit","toMap","toUnit","conv","raw","added","antiTrunc","accurate","config","invalid","isLuxonDuration","fromMillis","fromDurationLike","durationLike","fromISO","parseISODuration","fromISOTime","parseISOTimeOnly","normalizeUnit","quarter","week","isDuration","toFormat","fmtOpts","isValid","toHuman","unitDisplay","toObject","toISO","toISOTime","millis","suppressMilliseconds","suppressSeconds","includePrefix","shiftTo","str","toJSON","toString","toMillis","as","valueOf","plus","k","get","minus","mapUnits","fn","set","reconfigure","normalize","vals","previous","normalizeValues","built","accumulated","lastUnit","own","ak","negate","negated","u","v1","v2","INVALID","validateStartEnd","start","end","Interval","isLuxonInterval","fromDateTimes","builtStart","friendlyDateTime","builtEnd","validateError","after","before","text","startIsValid","endIsValid","isInterval","toDuration","startOf","hasSame","isEmpty","isAfter","isBefore","contains","dateTime","splitAt","dateTimes","sorted","results","splitBy","idx","divideEqually","overlaps","abutsStart","abutsEnd","engulfs","intersection","union","merge","intervals","b","sofar","final","xor","currentCount","ends","time","Array","difference","concat","toISODate","separator","diff","mapEndpoints","mapFn","invalidReason","Info","hasDST","proto","isValidIANAZone","locObj","monthsFormat","weekdaysFormat","features","relative","dayDiff","earlier","later","utcDayStart","keepLocalTime","differ","lowestOrder","delta","highWater","highOrderDiffs","remainingMillis","lowerOrderUnits","duration","numberingSystems","arab","arabext","bali","beng","deva","fullwide","gujr","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","latn","numberingSystemsUTF16","hanidecChars","digitRegex","append","intUnit","post","deser","code","min","max","parseDigits","spaceOrNBSP","String","spaceOrNBSPRegExp","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","groups","simple","partTypeStyleToTokenVal","short","long","dayperiod","dayPeriod","dummyDateTimeCache","maybeExpandMacroToken","formatter","part","tokenForPart","explainFromTokens","expandMacroTokens","one","two","three","four","six","oneOrTwo","oneToThree","oneToSix","oneToNine","twoToFour","fourToSix","unitate","unitForToken","disqualifyingUnit","buildRegex","regexString","handlers","matches","all","matchIndex","h","rawMatches","specificOffset","toField","dateTimeFromMatches","nonLeapLadder","leapLadder","unitOutOfRange","dayOfWeek","js","computeOrdinal","uncomputeOrdinal","ordinal","table","month0","gregorianToWeek","gregObj","weekNumber","weekToGregorian","weekData","weekdayOfJan4","yearInDays","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","hasInvalidGregorianData","validYear","validMonth","validDay","hasInvalidTimeData","validHour","validMinute","validSecond","validMillisecond","MAX_DATE","unsupportedZone","possiblyCachedWeekData","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","tsToObj","objToTS","adjustTime","oPre","millisToAdd","parseDataToDateTime","parsedZone","setZone","interpretationZone","toTechFormat","longFormat","extended","includeOffset","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","weeknumber","weeksnumber","weeknumbers","weekyear","weekyears","quickDT","tsNow","diffRelative","round","lastOpts","argList","args","ot","_zone","isLuxonDateTime","utc","fromJSDate","isDate","zoneToUse","fromSeconds","offsetProvis","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","objNow","defaultValues","foundFirst","higherOrderInvalid","validWeek","validWeekday","hasInvalidWeekData","validOrdinal","hasInvalidOrdinalData","parseISODate","fromRFC2822","preprocessRFC2822","parseRFC2822Date","fromHTTP","parseHTTPDate","fromFormat","parseFromTokens","fromString","fromSQL","parseSQL","isDateTime","resolvedLocaleOptions","toUTC","toLocal","keepCalendarTime","newTS","offsetGuess","setLocale","settingWeekStuff","mixed","normalizedUnit","q","endOf","toLocaleString","toLocaleParts","ext","toISOWeekDate","toRFC2822","toHTTP","toSQLDate","toSQLTime","includeZone","includeOffsetSpace","toSQL","toSeconds","toUnixInteger","toBSON","base","toJSDate","otherDateTime","durOpts","maybeArray","otherIsLater","diffed","diffNow","until","inputMs","adjustedToZone","toRelative","padding","toRelativeCalendar","calendary","fromFormatExplain","fromStringExplain","dateTimeish","define","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","_input","_value","kind","unformatFunction","regexp","isNumeral","replace","regexps","unformat","stringToNumber","version","numberToFormat","roundingFunction","abbrForce","abs","precision","signed","thousands","output","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","includes","abbreviations","split","toFixed","delimiters","slice","abbreviation","stringOriginal","currency","symbol","pow","search","insert","subString","reduce","array","callback","TypeError","len","arguments","multiplier","parts","correctionFactor","prototype","call","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","localeData","reset","property","register","name","validate","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","substr","inputString","formatFunction","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","space","splice","join","suffixes","binary","unformatRegex","filter","item","bytes","suffix","bytesMultiplier","symbols","toExponential","timeArray","useApolloClient","override","context","client","DocumentType","cache","Map","operationName","Query","Mutation","Subscription","document","variables","cached","fragments","queries","mutations","subscriptions","definitions","operation","push","definition","useQuery","query","useInternalState","stateRef","InternalState","state","setTick","forceUpdate","tick","ssrDisabledResult","loading","data","error","networkStatus","skipStandbyResult","ready","toQueryResultCache","WeakMap","renderPromises","useOptions","obsQuery","useObservableQuery","onNext","previousResult","getCurrentResult","setResult","subscription","subscribe","onError","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","toQueryResult","watchQueryOptions","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","observable","reobserve","previousData","onCompleted","ssr","skip","fetchPolicy","defaultOptions","otherOptions","toMerge","globalDefaults","watchQuery","latestOptions","forEach","defaultOptionName","currentOptionValue","merged","assign","initialFetchPolicy","getSSRObservable","obsQueryFields","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","queryResult","resultWithoutPartial","called","errors","graphQLErrors","partial","partialRefetch","module","exports","require","is","useState","useEffect","useLayoutEffect","useDebugValue","getSnapshot","window","createElement","g","useSyncExternalStore"],"mappings":"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","file":"static/js/0.154e5933.chunk.js","sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n,\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n,\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n,\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s,\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l,\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l,\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n","/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors.js\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nexport function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  const isNeg = input < 0;\n  let padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\n\nexport function parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nexport function parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\n\nexport function parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n  return +d;\n}\n\nexport function weeksInWeekYear(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = { timeZoneName: offsetFormat, ...intlOpts };\n\n  const parsed = new Intl.DateTimeFormat(locale, modified)\n    .formatToParts(date)\n    .find((m) => m.type.toLowerCase() === \"timezonename\");\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject(obj, normalizer) {\n  const normalized = {};\n  for (const u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\nexport function formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n\nexport const ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z0-9_+-]{1,256}(\\/[A-Za-z0-9_+-]{1,256})?)?/;\n","import * as Formats from \"./formats.js\";\nimport { pick } from \"./util.js\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...monthsNarrow];\n    case \"short\":\n      return [...monthsShort];\n    case \"long\":\n      return [...monthsLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...weekdaysNarrow];\n    case \"short\":\n      return [...weekdaysShort];\n    case \"long\":\n      return [...weekdaysLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...erasNarrow];\n    case \"short\":\n      return [...erasShort];\n    case \"long\":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n  };\n\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n      ? units[unit][0]\n      : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hourCycle\",\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n","import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import { formatOffset, parseZoneInfo, isUndefined, objToLocalTS } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      era: \"short\",\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  era: 3,\n  hour: 4,\n  minute: 5,\n  second: 6,\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+) (AD|BC),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date);\n  const filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i];\n    const pos = typeToPos[type];\n\n    if (type === \"era\") {\n      filled[pos] = value;\n    } else if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport default class IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /** @override **/\n  get type() {\n    return \"iana\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name);\n    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts\n      ? partsOffset(dtf, date)\n      : hackyOffset(dtf, date);\n\n    if (adOrBc === \"BC\") {\n      year = -Math.abs(year) + 1;\n    }\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    const adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0,\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /** @override **/\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n","/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n","import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n","import { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n\n    let z;\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    const intlOpts = { ...this.opts };\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    return this.dtf.formatToParts(this.dt.toJSDate());\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  ianaRegex,\n  isUndefined,\n  parseFloating,\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return (m) =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [{ ...mergedVals, ...val }, mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n  extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1),\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3]),\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration =\n  /^-?P(?:(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)Y)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)M)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)W)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)D)?(?:T(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)H)?(?:(-?\\d{1,9}(?:\\.\\d{1,9})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =\n    match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n  const negativeSeconds = secondStr && secondStr[0] === \"-\";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseFloating(yearStr)),\n      months: maybeNegate(parseFloating(monthStr)),\n      weeks: maybeNegate(parseFloating(weekStr)),\n      days: maybeNegate(parseFloating(dayStr)),\n      hours: maybeNegate(parseFloating(hourStr)),\n      minutes: maybeNegate(parseFloating(minuteStr)),\n      seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),\n    },\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60,\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 =\n  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr,\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 =\n    /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOOrdinalDateAndTime = combineExtractors(\n  extractISOOrdinalData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n\n/**\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nexport function parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n","import { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Locale from \"./impl/locale.js\";\nimport { parseISODuration, parseISOTimeOnly } from \"./impl/regexParser.js\";\nimport {\n  asNumber,\n  hasOwnProperty,\n  isInteger,\n  isNumber,\n  isUndefined,\n  normalizeObject,\n  roundTo,\n} from \"./impl/util.js\";\nimport Settings from \"./settings.js\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nexport const lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000,\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000,\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 },\n  },\n  casualMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000,\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000,\n    },\n\n    ...lowOrderMatrix,\n  },\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: (daysInYearAccurate * 24) / 4,\n      minutes: (daysInYearAccurate * 24 * 60) / 4,\n      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,\n    },\n    ...lowOrderMatrix,\n  };\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\",\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  const conv = matrix[toUnit][fromUnit],\n    raw = fromMap[fromUnit] / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration#fromMillis}, {@link Duration#fromObject}, or {@link Duration#fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject({ milliseconds: count }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj, opts = {}) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */\n  static fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`\n      );\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\",\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `w` for weeks\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = {\n      ...opts,\n      floor: opts.round !== false && opts.floor !== false,\n    };\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included.\n   * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\n   * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */\n  toHuman(opts = {}) {\n    const l = orderedUnits\n      .map((unit) => {\n        const val = this.values[unit];\n        if (isUndefined(val)) {\n          return null;\n        }\n        return this.loc\n          .numberFormatter({ style: \"unit\", unitDisplay: \"long\", ...opts, unit: unit.slice(0, -1) })\n          .format(val);\n      })\n      .filter((n) => n);\n\n    return this.loc\n      .listFormatter({ type: \"conjunction\", style: opts.listStyle || \"narrow\", ...opts })\n      .format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject() {\n    if (!this.isValid) return {};\n    return { ...this.values };\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = {\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\",\n      ...opts,\n    };\n\n    const value = this.shiftTo(\"hours\", \"minutes\", \"seconds\", \"milliseconds\");\n\n    let fmt = opts.format === \"basic\" ? \"hhmm\" : \"hh:mm\";\n\n    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {\n      fmt += opts.format === \"basic\" ? \"ss\" : \":ss\";\n      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {\n        fmt += \".SSS\";\n      }\n    }\n\n    let str = value.toFormat(fmt);\n\n    if (opts.includePrefix) {\n      str = \"T\" + str;\n    }\n\n    return str;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    return this.as(\"milliseconds\");\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map((u) => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    return clone(this, { values: built }, true).normalize();\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval#fromDateTimes}, {@link Interval#after}, {@link Interval#before}, or {@link Interval#fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Settings from \"./settings.js\";\nimport Locale from \"./impl/locale.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nimport { hasRelative } from \"./impl/util.js\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.now().setZone(zone).set({ month: 12 });\n\n    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {Array}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {Array}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */\n  static weekdaysFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {Array}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {Array}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * @example Info.features() //=> { relative: false }\n   * @return {Object}\n   */\n  static features() {\n    return { relative: hasRelative() };\n  }\n}\n","import Duration from \"../duration.js\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf(\"day\").valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"quarters\", (a, b) => b.quarter - a.quarter],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      },\n    ],\n    [\"days\", dayDiff],\n  ];\n\n  const results = {};\n  let lowestOrder, highWater;\n\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      let delta = differ(cursor, later);\n      highWater = cursor.plus({ [unit]: delta });\n\n      if (highWater > later) {\n        cursor = cursor.plus({ [unit]: delta - 1 });\n        delta -= 1;\n      } else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function (earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    (u) => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(results, opts);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n","const numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\",\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n};\n\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\nexport function digitRegex({ numberingSystem }, append = \"\") {\n  return new RegExp(`${numberingSystems[numberingSystem || \"latn\"]}${append}`);\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset, hasOwnProperty } from \"./util.js\";\nimport Formatter from \"./formatter.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport DateTime from \"../datetime.js\";\nimport { digitRegex, parseDigits } from \"./digits.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = (i) => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `( |${NBSP})`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, \"\") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = (t) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\", false), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\", false), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true, false), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true, false), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false, false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false, false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false, false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false, false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true, false), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true, false), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP,\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\",\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\",\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\",\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\",\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\",\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\",\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\",\n  },\n};\n\nfunction tokenForPart(part, locale, formatOpts) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    return {\n      literal: true,\n      val: value,\n    };\n  }\n\n  const style = formatOpts[type];\n\n  let val = partTypeStyleToTokenVal[type];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = (token) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n\n  let zone = null;\n  let specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone, specificOffset];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n\n  if (!formatOpts) {\n    return token;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const parts = formatter.formatDateTimeParts(getDummyDateTime());\n\n  const tokens = parts.map((p) => tokenForPart(p, locale, formatOpts));\n\n  if (tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nfunction expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nexport function explainFromTokens(locale, input, format) {\n  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\n    units = tokens.map((t) => unitForToken(t, locale)),\n    disqualifyingUnit = units.find((t) => t.invalidReason);\n\n  if (disqualifyingUnit) {\n    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n  } else {\n    const [regexString, handlers] = buildRegex(units),\n      regex = RegExp(regexString, \"i\"),\n      [rawMatches, matches] = match(input, regex, handlers),\n      [result, zone, specificOffset] = matches\n        ? dateTimeFromMatches(matches)\n        : [null, null, undefined];\n    if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n      throw new ConflictingSpecificationError(\n        \"Can't include meridiem when specifying 24-hour format\"\n      );\n    }\n    return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };\n  }\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, specificOffset, invalidReason];\n}\n","import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger,\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nfunction dayOfWeek(year, month, day) {\n  const d = new Date(Date.UTC(year, month - 1, day));\n\n  if (year < 100 && year >= 0) {\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n\n  const js = d.getUTCDay();\n\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex((i) => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };\n}\n\nexport function weekToGregorian(weekData) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(weekData) };\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData;\n  const ordinal = computeOrdinal(year, month, day);\n  return { year, ordinal, ...timeObject(gregData) };\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData;\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(ordinalData) };\n}\n\nexport function hasInvalidWeekData(obj) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n","import Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Settings from \"./settings.js\";\nimport Info from \"./info.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS,\n  padStart,\n} from \"./impl/util.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport diff from \"./impl/diff.js\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser.js\";\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser.js\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n} from \"./impl/conversions.js\";\nimport * as Formats from \"./impl/formats.js\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError,\n} from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid DateTime\";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid,\n  };\n  return new DateTime({ ...current, ...alts, old: current });\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds(),\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = {\n      ...inst.c,\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7,\n    },\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds,\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, {\n        ...opts,\n        zone: interpretationZone,\n        specificOffset,\n      });\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ,\n        forceSimple: true,\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nfunction toISODate(o, extended) {\n  const longFormat = o.c.year > 9999 || o.c.year < 0;\n  let c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\n\nfunction toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset) {\n  let c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n\n  if (o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\",\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\",\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  const zone = normalizeZone(opts.zone, Settings.defaultZone),\n    loc = Locale.fromObject(opts),\n    tsNow = Settings.now();\n\n  let ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (const u of orderedUnits) {\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n\n    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    const offsetProvis = zone.offset(tsNow);\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n  } else {\n    ts = tsNow;\n  }\n\n  return new DateTime({ ts, zone, loc, o });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = (unit) => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\nfunction lastOpts(argList) {\n  let opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime#local}, {@link DateTime#utc}, and (most flexibly) {@link DateTime#fromObject}. To create one from a standard string format, use {@link DateTime#fromISO}, {@link DateTime#fromHTTP}, and {@link DateTime#fromRFC2822}. To create one from a custom string format, use {@link DateTime#fromFormat}. To create one from a native JS date, use {@link DateTime#fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        const ot = zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */\n  static utc() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options),\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj, opts = {}) {\n    obj = obj || {};\n    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset)\n        ? opts.specificOffset\n        : zoneToUse.offset(tsNow),\n      normalized = normalizeObject(obj, normalizeUnit),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(opts);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized)\n        : containsOrdinal\n        ? hasInvalidOrdinalData(normalized)\n        : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized)\n        : containsOrdinal\n        ? ordinalToGregorian(normalized)\n        : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc,\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      }),\n      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is an instance of DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.isUniversal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOptions(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian({ ...gregorianToWeek(this.c), ...normalized });\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });\n    } else {\n      mixed = { ...this.toObject(), ...normalized };\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  toISO({\n    format = \"extended\",\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    const ext = format === \"extended\";\n\n    let c = toISODate(this, ext);\n    c += \"T\";\n    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  toISODate({ format = \"extended\" } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    format = \"extended\",\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    let c = includePrefix ? \"T\" : \"\";\n    return (\n      c +\n      toISOTime(this, format === \"extended\", suppressSeconds, suppressMilliseconds, includeOffset)\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {\n    let fmt = \"HH:mm:ss.SSS\";\n\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */\n  toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = { ...this.c };\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n\n    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), {\n      ...options,\n      numeric: \"always\",\n      units,\n      unit,\n    });\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {\n      ...options,\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true,\n    });\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Info from \"./info.js\";\nimport Zone from \"./zone.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport InvalidZone from \"./zones/invalidZone.js\";\nimport SystemZone from \"./zones/systemZone.js\";\nimport Settings from \"./settings.js\";\n\nconst VERSION = \"2.3.2\";\n\nexport {\n  VERSION,\n  DateTime,\n  Duration,\n  Interval,\n  Info,\n  Zone,\n  FixedOffsetZone,\n  IANAZone,\n  InvalidZone,\n  SystemZone,\n  Settings,\n};\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(watchQueryOptions);\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // We use the mergeOptions helper function (which uses compact(...) and\n    // shallow-merges variables) to combine globalDefaults with any local\n    // defaultOptions provided to useQuery.\n    const toMerge: Partial<WatchQueryOptions<TVariables, TData>>[] = [];\n\n    // Merge global client.watchQuery default options with the lowest priority.\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    // Next, merge any defaultOptions passed directly to useQuery.\n    if (defaultOptions) toMerge.push(defaultOptions);\n\n    const latestOptions = this.observable && this.observable.options;\n    if (latestOptions && toMerge.length) {\n      // If we already have this.watchQueryOptions, those options should take\n      // precedence over default options of the same name. It might be simpler\n      // to do toMerge.push(this.watchQueryOptions), but that potentially\n      // (re)injects unrelated/unwanted options. Passing Object.create(null) as\n      // the second argument to toMerge.reduce ensures the result is a newly\n      // created object, so we can safely modify it in the forEach loop below.\n      const defaults = toMerge.reduce(mergeOptions, Object.create(null));\n\n      // Compact the toMerge array to hold only the merged defaults. This is\n      // equivalent to toMerge.splice(0, toMerge.length, defaults).\n      toMerge.length = 1;\n      toMerge[0] = defaults;\n\n      Object.keys(defaults).forEach(\n        (defaultOptionName: keyof WatchQueryOptions<TVariables, TData>) => {\n          const currentOptionValue = latestOptions[defaultOptionName];\n          if (\n            hasOwnProperty.call(latestOptions, defaultOptionName) &&\n            !equal(defaults[defaultOptionName], currentOptionValue)\n          ) {\n            // If you keep passing useQuery({ defaultOptions: { variables }}),\n            // those default variables continue to provide their default values\n            // every time, though in most cases this.watchQueryOptions.variables\n            // will have a current value for every default variable name, so the\n            // defaults don't matter. However, if a variable has been removed\n            // from this.watchQueryOptions.variables, future useQuery calls can\n            // restore its default value from defaultOptions.variables.\n            defaults[defaultOptionName] = defaultOptionName === \"variables\"\n              ? { ...defaults.variables, ...currentOptionValue }\n              : currentOptionValue;\n          }\n        },\n      );\n    }\n\n    // Give highest precedence to any non-default WatchQueryOptions passed\n    // directly to useQuery.\n    toMerge.push(otherOptions);\n\n    const merged = toMerge.reduce(mergeOptions, Object.create(null));\n\n    // This Object.assign is safe because merged is the fresh object created by\n    // the Object.create(null) argument to toMerge.reduce.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(merged, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    } else if (!watchQueryOptions.fetchPolicy) {\n      // We applied all available fetchPolicy default values above (from\n      // globalDefaults and defaultOptions), so, if fetchPolicy is still\n      // undefined, fall back to the default default (no typo), cache-first.\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (skip) {\n      const {\n        // The watchQueryOptions.initialFetchPolicy field usually defaults to\n        // watchQueryOptions.fetchPolicy, which has now been properly\n        // defaulted/initialized. However, watchQueryOptions.initialFetchPolicy\n        // can be provided explicitly instead, if more control is desired.\n        initialFetchPolicy = watchQueryOptions.fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    return watchQueryOptions;\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery({\n          ...this.watchQueryOptions,\n        });\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    if (this.renderPromises) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      const ssrAllowed = !(\n        this.queryHookOptions.ssr === false ||\n        this.queryHookOptions.skip\n      );\n\n      if (ssrAllowed && obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n"],"sourceRoot":""}