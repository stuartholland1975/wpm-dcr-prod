{"version":3,"sources":["components/ui-components/buttons/UploadButton.js","archive/ImportOrderDetailExcel.js"],"names":["useStyles","makeStyles","root","background","color","borderRadius","fontWeight","border","borderColor","padding","textTransform","cursor","UploadButton","props","classes","Button","variant","className","startIcon","fullWidth","label","GET_PROJECT_TITLE","gql","GET_ACTIVITY_INFO","CREATE_LOCATION_WITH_ORDERDETAIL","CHECK_ACTIVITY_CODE_EXISTS","Item","sx","other","Box","textAlign","ImportData","useState","undefined","initialData","setInitialData","apiData","setApiData","mutationData","setMutationData","importedData","setImportedData","activityCodes","setActivityCodes","activityCheck","setActivityCheck","counter","setCounter","history","useHistory","header","useQuery","variables","id","gridSelectionsVar","selectedOrder","data","useLazyQuery","onCompleted","updatedData","map","item","priceId","ratesetPrices","nodes","filter","obj","activitycode","activityCode","code","ratesetHeaderId","ratesetId","reference","itemNumber","qtyOrdered","itemTypeId","packNumber","valueBaseMaterials","ratesetPriceId","updateInfo","getActivityInfo","useMutation","notifyOnNetworkStatusChange","previousState","length","push","createSitelocationWithDetail","submittingData","loading","networkStatus","activitycodes","totalCount","codes","checkActivityCodeExists","a","forEach","input","CircularProgress","size","p","style","margin","fontSize","orderheader","projectTitle","display","gridTemplateColumns","mb","type","accept","onChange","event","file","target","files","readFile","then","readData","catch","error","console","htmlFor","disabled","onClick","document","getElementById","click","generateObjects","activityListSet","Set","activityList","Array","from","apiObject","sitelocation","orderheaderId","orderdetails","create","String","justifyContent","ml","mr","onSheetUpdate","currentSheet","activeSheetClassName","reactExcelClassName"],"mappings":"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","file":"static/js/26.d8771836.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@mui/material/Button';\nimport {makeStyles} from '@mui/styles';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\n\nconst useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(#0000cc, #000080)',\n      color: 'white',\n      borderRadius: 0,\n\n      fontWeight: 600,\n      border: '5px solid',\n      borderColor: 'white',\n      padding: '5px 25px',\n\n      textTransform: 'uppercase',\n      '&:hover': {\n        background: 'linear-gradient(#000080, #0000cc)',\n      },\n      '&:disabled': {\n        cursor: 'not-allowed',\n      },\n    },\n  })\n;\n\nconst UploadButton = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant='contained'\n      className={classes.root}\n      startIcon={<FileUploadIcon/>}\n      {...props}\n      fullWidth={true}\n    >\n      {props.label}\n    </Button>\n  );\n};\n\nexport default UploadButton;","import {generateObjects, ReactExcel, readFile} from '@ramonak/react-excel';\nimport React, {useState} from 'react';\nimport UploadButton from '../components/ui-components/buttons/UploadButton';\nimport {useQuery, gql, useLazyQuery, useMutation} from '@apollo/client';\nimport {gridSelectionsVar} from '../cache';\nimport {Box, CircularProgress} from '@mui/material';\nimport {useHistory} from \"react-router-dom\";\n\n\nconst GET_PROJECT_TITLE = gql`\n    query GetProjectTitle($id: Int!) {\n        orderheader(id: $id) {\n            projectTitle\n        }\n    }\n`;\n\nconst GET_ACTIVITY_INFO = gql`\n    query getActivityInfo($codes: [String!]) {\n        ratesetPrices(filter: {activitycode: {activityCode: {in: $codes}}}) {\n            nodes {\n                activitycodeId\n                ratesetHeaderId\n                id\n                unitBaseLabour\n                unitBaseOther\n                activitycode {\n                    activityCode\n                }\n            }\n            totalCount\n        }\n    }\n`\n\nconst CREATE_LOCATION_WITH_ORDERDETAIL = gql`\n    mutation CreateLocationWithDetail($input:  CreateSitelocationInput!) {\n        createSitelocation(\n            input: $input\n        ) {\n            sitelocation {\n                id\n                reference\n                orderdetailWithValues {\n                    nodes {\n                        activityCode\n                        activityDescription\n                        complete\n                        id\n                        itemNumber\n                        locationReference\n                        orderNumber\n                        projectTitle\n                        qtyApplied\n                        qtyComplete\n                        qtyOrdered\n                        qtyOs\n                        valueApplied\n                        valueComplete\n                        valueOs\n                        valuePayableTotal\n                        worksheetReference\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst CHECK_ACTIVITY_CODE_EXISTS = gql`\n    query CheckActivitycodeExists($codes: [String!]) {\n        activitycodes(filter: {activityCode: {in: $codes}}) {\n            nodes {\n                id\n                activityCode\n            }\n            totalCount\n        }\n    }\n`\n\nfunction Item(props) {\n    const {sx, ...other} = props;\n    return (\n        <Box\n            sx={{\n                textAlign: 'center',\n                ...sx,\n            }}\n            {...other}\n        />\n    );\n}\n\nconst ImportData = () => {\n\n    const [initialData, setInitialData] = useState(undefined);\n    const [apiData, setApiData] = useState([]);\n    const [mutationData, setMutationData] = useState([]);\n    const [importedData, setImportedData] = useState([])\n    const [activityCodes, setActivityCodes] = useState([])\n    const [activityCheck, setActivityCheck] = useState(false)\n    const [counter, setCounter] = useState(1)\n\n    const history = useHistory()\n\n\n    const {data: header} = useQuery(GET_PROJECT_TITLE, {\n        variables: {id: gridSelectionsVar().selectedOrder.id},\n\n    });\n\n    const [getActivityInfo] = useLazyQuery(GET_ACTIVITY_INFO, {\n        onCompleted: data => {\n            updateInfo(data)\n        }\n    })\n\n    const [createSitelocationWithDetail, {\n\n        loading: submittingData, networkStatus,\n\n    }] = useMutation(CREATE_LOCATION_WITH_ORDERDETAIL, {\n        notifyOnNetworkStatusChange: false,\n        onCompleted: () => {\n\n            setCounter(previousState => previousState + 1)\n\n            if (mutationData.length === counter) {\n                history.push('/projects')\n            }\n\n        }\n    })\n\n    const [checkActivityCodeExists] = useLazyQuery(CHECK_ACTIVITY_CODE_EXISTS, {\n        onCompleted: data => {\n            setActivityCheck(data.activitycodes.totalCount === activityCodes.length);\n            getActivityInfo({\n                variables: {codes: activityCodes}\n            })\n        }\n    })\n\n    function updateInfo(data) {\n        const updatedData = apiData.map(item => {\n            const priceId = data.ratesetPrices.nodes.filter(obj => obj.activitycode.activityCode === item.code && obj.ratesetHeaderId === item.ratesetId)\n            return ({\n                reference: item.reference,\n                itemNumber: item.itemNumber,\n                qtyOrdered: item.qtyOrdered,\n                itemTypeId: item.itemTypeId,\n                packNumber: item.packNumber,\n                valueBaseMaterials: item.valueBaseMaterials,\n                ratesetPriceId: priceId.map(item => item.id)[0],\n            })\n        })\n        setApiData(updatedData)\n    }\n\n    const handleUpload = (event) => {\n        const file = event.target.files[0];\n        readFile(file)\n            .then((readData) => setInitialData(readData))\n            .catch((error) => console.error(error));\n    };\n\n    function verifyData() {\n        setApiData(generateObjects(importedData))\n        const activityListSet = [...new Set(generateObjects(importedData).map((item) => item.code))];\n        const activityList = Array.from(activityListSet)\n        setActivityCodes(activityList)\n        checkActivityCodeExists({\n            variables: {codes: activityList}\n        })\n    }\n\n    async function handleSubmitData() {\n        mutationData.forEach((item) => {\n                createSitelocationWithDetail({\n                    variables: {input: item}\n                })\n            }\n        )\n\n    }\n\n    const compileData = () => {\n        const uniqueLocations = [...new Set(apiData.map((item) => item.reference))];\n        const apiObject = uniqueLocations.map((item) => ({\n            sitelocation: {\n                reference: item,\n                orderheaderId: gridSelectionsVar().selectedOrder.id,\n                orderdetails: {\n                    create: apiData\n                        .filter((obj) => obj.reference === item)\n                        .map((item) => ({\n                            orderheaderId: gridSelectionsVar().selectedOrder.id,\n                            itemNumber: item.itemNumber,\n                            ratesetPriceId: item.ratesetPriceId,\n                            itemTypeId: item.itemTypeId,\n                            packNumber: String(item.packNumber),\n                            valueBaseMaterials: item.valueBaseMaterials,\n                            qtyOrdered: item.qtyOrdered,\n                        })),\n                },\n            },\n        }));\n        setMutationData(apiObject);\n\n    }\n    if (submittingData || networkStatus === 1) return <CircularProgress\n        color='secondary'\n        size={300}\n        sx={{p: 25}}/>\n\n    return (\n        <>\n            <div style={{margin: 10, fontWeight: 'bold', fontSize: 20}}>\n                {header && header.orderheader.projectTitle}\n            </div>\n            <Box\n                sx={{display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', mb: 2}}\n            >\n                <Item>\n                    <input\n                        type='file'\n                        accept='.xlsx'\n                        onChange={handleUpload}\n                        id='upload'\n                        style={{display: 'none'}}\n                    />\n                    <label htmlFor='upload'>\n                        <UploadButton\n                            label='select file'\n                            disabled={initialData !== undefined}\n                            onClick={() => document.getElementById('upload').click()}\n                        />\n                    </label>\n                </Item>\n                <Item>\n                    <UploadButton\n                        onClick={verifyData}\n                        label='verify data'\n                        disabled={initialData === undefined || activityCheck}\n                    />\n                </Item>\n                <Item>\n                    <UploadButton\n                        label='compile data'\n                        disabled={!activityCheck || mutationData.length > 0}\n                        onClick={compileData}\n                    />\n                </Item>\n                <Item>\n                    <UploadButton\n                        label='submit data'\n                        disabled={!initialData || mutationData.length === 0}\n                        onClick={handleSubmitData}\n                    />\n                </Item>\n            </Box>\n\n            <Box display={'flex'} justifyContent={'space-between'} ml={5} mr={5} fontWeight={'bold'} fontSize={20}>\n                <div>{`Item Count ${apiData.length}`}</div>\n                <div>{`Location Count ${mutationData.length}`}</div>\n            </Box>\n            <ReactExcel\n                initialData={initialData}\n                onSheetUpdate={currentSheet => setImportedData(currentSheet)}\n                activeSheetClassName='active-sheet'\n                reactExcelClassName='react-excel'\n            />\n        </>\n    );\n};\n\nexport default ImportData;\n"],"sourceRoot":""}